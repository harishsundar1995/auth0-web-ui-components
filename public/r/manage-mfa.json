{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "manage-mfa",
  "type": "registry:block",
  "title": "Manage MFA",
  "description": "A block for managing Multi-Factor Authentication (MFA) factors, including enrollment and deletion.",
  "dependencies": [
    "sonner",
    "react-hook-form",
    "@hookform/resolvers",
    "zod",
    "react-qr-code",
    "@auth0/auth0-react",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react",
    "next-themes",
    "input-otp"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "card",
    "label",
    "separator",
    "spinner",
    "sonner",
    "dialog",
    "form",
    "input",
    "input-otp"
  ],
  "files": [
    {
      "path": "src/blocks/manage-mfa.tsx",
      "content": "import * as React from 'react';\nimport { useComponentConfig, useI18n, useMFA } from '@/hooks';\nimport type { ManageMfaProps, MFAType, Authenticator } from '@/types';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { Toaster } from '@/components/ui/sonner';\nimport { EnrollmentForm } from '@/components/mfa/enrollment-form';\nimport { ENROLL, CONFIRM } from '@/lib/constants';\nimport { Spinner } from '@/components/ui/spinner';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\n/**\n * ManageMfa Component\n *\n * A component responsible for managing Multi-Factor Authentication (MFA) factors for a user.\n * This component handles the mfa access token fetching ,fetching authenticators, enrolling, and deletion of MFA factors and manages the MFA access token.\n * It operates in both ProxyMode (RWA) and SPA modes for authentication.\n *\n * - **ProxyMode (RWA)**: In this mode, the component interacts with a proxy service to manage MFA\n * - **SPA (Single Page Application)**: In this mode, the component communicates directly with the API to manage MFA factors.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {Object} [props.localization={}] - Localization object for i18n support.\n * This object should contain key-value pairs for each language and its associated translations.\n *\n * Example:\n * ```js\n * localization={{\n *   title: 'Manage MFA Factors',\n *   description: 'Here you can manage your Multi-Factor Authentication (MFA) factors.',\n *   loading: 'Loading...',\n *   errors: {\n *     factorsLoadingError: 'An error occurred while loading MFA factors.',\n *   },\n *   no_active_mfa: 'No active MFA factors found.',\n *   enroll_factor: 'Successfully enrolled the MFA factor.',\n *   remove_factor: 'Successfully removed the MFA factor.',\n *   delete: 'Delete',\n *   enroll: 'Enroll',\n * }}\n * ```\n * @param {boolean} [props.hideHeader=false] - Whether to hide the header.\n * @param {boolean} [props.showActiveOnly=false] - Whether to show only active MFA factors.\n * @param {boolean} [props.disableEnroll=false] - Whether to disable the enrollment of new factors.\n * @param {boolean} [props.disableDelete=false] - Whether to disable the deletion of factors.\n * @param {boolean} [props.readOnly=false] - Whether the component is in read-only mode.\n * @param {Object} [props.factorConfig={}] - Configuration for MFA factors, controlling visibility and enabled state.\n * @param {Function} [props.onEnroll] - Callback fired when an MFA factor is successfully enrolled.\n * @param {Function} [props.onDelete] - Callback fired when an MFA factor is successfully deleted.\n * @param {Function} [props.onFetch] - Callback fired when MFA factors are fetched.\n * @param {Function} [props.onErrorAction] - Callback fired when an error occurs during an action (enroll/delete).\n * @param {Function} [props.onBeforeAction] - Callback fired before performing an action (enroll/delete).\n *\n * @returns {React.JSX.Element} The rendered component.\n */\nexport function ManageMfa({\n  localization = {},\n  hideHeader = false,\n  showActiveOnly = false,\n  disableEnroll = false,\n  disableDelete = false,\n  readOnly = false,\n  factorConfig = {},\n  onEnroll,\n  onDelete,\n  onFetch,\n  onErrorAction,\n  onBeforeAction,\n}: ManageMfaProps): React.JSX.Element {\n  const t = useI18n('mfa', localization);\n  const {\n    config: { loader },\n  } = useComponentConfig();\n  const { fetchFactors, enrollMfa, deleteMfa, confirmEnrollment } = useMFA();\n\n  const [factors, setFactors] = React.useState<Authenticator[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [isDeletingFactor, setIsDeletingFactor] = React.useState(false);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n  const [enrollFactor, setEnrollFactor] = React.useState<MFAType | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = React.useState(false);\n  const [factorToDelete, setFactorToDelete] = React.useState<{\n    id: string;\n    type: MFAType;\n  } | null>(null);\n\n  /**\n   * Loads the available MFA factors from the API and updates the state.\n   * This is called on initial load and when factors need to be refreshed.\n   */\n  const loadFactors = React.useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const factors = await fetchFactors(showActiveOnly);\n      setFactors(factors);\n      onFetch?.();\n    } catch (err) {\n      setError(t('errors.factors_loading_error'));\n    }\n\n    setLoading(false);\n  }, [fetchFactors, showActiveOnly, onFetch, onErrorAction]);\n\n  React.useEffect(() => {\n    loadFactors();\n  }, [loadFactors]);\n\n  /**\n   * Filters visible MFA factors based on the provided factor configuration.\n   * Each factor's visibility is determined by the configuration settings.\n   *\n   * @returns {Authenticator[]} Filtered MFA factors.\n   */\n  const visibleFactors = React.useMemo(() => {\n    return factors.filter((factor) => {\n      const config = factorConfig[factor.factorName as keyof typeof factorConfig];\n      return config?.visible !== false;\n    });\n  }, [factors, factorConfig]);\n\n  /**\n   * Handles the enrollment button click for a specific MFA factor.\n   * Opens the enrollment dialog for the chosen factor.\n   *\n   * @param {MFAType} factor - The MFA factor to be enrolled.\n   */\n  const handleEnrollClick = (factor: MFAType) => {\n    setEnrollFactor(factor);\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = React.useCallback(() => {\n    setDialogOpen(false);\n    setEnrollFactor(null);\n  }, []);\n\n  /**\n   * Handles the initial click on the delete button for an MFA factor.\n   * This function either:\n   * 1. Triggers the onBeforeAction callback and proceeds with deletion if approved\n   * 2. Opens a confirmation dialog if no onBeforeAction is provided\n   *\n   * The function prevents deletion if:\n   * - Component is in readonly mode\n   * - Delete action is disabled\n   * - onBeforeAction returns false\n   *\n   * @param {string} factorId - The unique identifier of the MFA factor to delete\n   * @param {MFAType} factorType - The type of MFA factor being deleted (e.g., 'sms', 'email', 'totp')\n   * @returns {Promise<void>}\n   */\n  const handleDeleteClick = React.useCallback(\n    async (factorId: string, factorType: MFAType) => {\n      if (readOnly || disableDelete) return;\n\n      if (onBeforeAction) {\n        // If onBeforeAction exists, proceed directly\n        const canProceed = await onBeforeAction('delete', factorType);\n        if (!canProceed) return;\n        await handleConfirmDelete(factorId);\n      } else {\n        setFactorToDelete({ id: factorId, type: factorType });\n        setIsDeleteDialogOpen(true);\n      }\n    },\n    [readOnly, disableDelete, onBeforeAction],\n  );\n\n  /**\n   * Handles the confirmation and execution of MFA factor deletion.\n   * This callback is triggered when a user confirms the deletion in the confirmation dialog\n   * or when deletion is approved through onBeforeAction.\n   *\n   * The function:\n   * 1. Deletes the MFA factor\n   * 2. Reloads the factors list\n   * 3. Shows success/error notifications\n   * 4. Handles cleanup of dialog and loading states\n   *\n   * @param {string} factorId - The unique identifier of the MFA factor to delete\n   * @throws {Error} When deletion fails or factors cannot be reloaded\n   */\n  const handleConfirmDelete = React.useCallback(\n    async (factorId: string) => {\n      setIsDeletingFactor(true);\n\n      const cleanUp = () => {\n        setIsDeletingFactor(false);\n        setIsDeleteDialogOpen(false);\n        setFactorToDelete(null);\n      };\n\n      try {\n        await deleteMfa(factorId);\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(t('errors.delete_factor'));\n        toast.error(t('errors.delete_factor'));\n        onErrorAction?.(error, 'delete');\n        cleanUp();\n        return;\n      }\n\n      toast.success(t('remove_factor'), {\n        duration: 2000,\n        onAutoClose: () => onDelete?.(),\n      });\n\n      try {\n        await loadFactors();\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(t('errors.factors_loading_error'));\n        onErrorAction?.(error, 'delete');\n      } finally {\n        cleanUp();\n      }\n    },\n    [deleteMfa, loadFactors, onDelete, onErrorAction, t],\n  );\n\n  /**\n   * Handles the successful enrollment of an MFA factor.\n   * Displays a success message and reloads the factors list.\n   */\n  const handleEnrollSuccess = React.useCallback(async () => {\n    setDialogOpen(false);\n    setEnrollFactor(null);\n    try {\n      toast.success(t('enroll_factor'), {\n        duration: 2000,\n        onAutoClose: () => {\n          onEnroll?.();\n        },\n      });\n      await loadFactors();\n    } catch {\n      toast.dismiss();\n      toast.error(t('errors.factors_loading_error'));\n    }\n  }, [loadFactors, onEnroll, t]);\n\n  /**\n   * Handles errors during the enrollment or confirmation process.\n   *\n   * @param {Error} error - The error object containing the failure message.\n   * @param {string} stage - The stage of the process ('enroll' or 'confirm').\n   */\n  const handleEnrollError = React.useCallback(\n    (error: Error, stage: typeof ENROLL | typeof CONFIRM) => {\n      toast.error(\n        `${stage === ENROLL ? t('enrollment') : t('confirmation')} ${t('errors.failed', { message: error.message })}`,\n      );\n      onErrorAction?.(error, stage);\n    },\n    [onErrorAction],\n  );\n\n  return (\n    <>\n      <Toaster position=\"top-right\" />\n      {loading ? (\n        loader || <Spinner />\n      ) : error ? (\n        <div className=\"flex items-center justify-center p-4\">\n          <Label className=\"text-center text-destructive\">{error}</Label>\n        </div>\n      ) : (\n        <Card>\n          {!hideHeader && (\n            <CardHeader>\n              <CardTitle>{t('title')}</CardTitle>\n              <CardDescription>{t('description')}</CardDescription>\n            </CardHeader>\n          )}\n\n          <CardContent className=\"grid gap-6 p-4 pt-0 md:p-6 md:pt-0\">\n            {showActiveOnly && visibleFactors.length === 0 ? (\n              <Label className=\"text-center text-muted-foreground\">{t('no_active_mfa')}</Label>\n            ) : (\n              visibleFactors.map((factor, idx) => {\n                const isEnabledFactor =\n                  factorConfig?.[factor.factorName as MFAType]?.enabled !== false;\n\n                return (\n                  <div\n                    key={`${factor.name}-${idx}`}\n                    className={`flex flex-col gap-6 ${!isEnabledFactor ? 'opacity-50 pointer-events-none' : ''}`}\n                    aria-disabled={!isEnabledFactor}\n                  >\n                    {idx > 0 && <Separator />}\n                    <div className=\"flex flex-col items-center justify-between space-y-6 md:flex-row md:space-x-2 md:space-y-0\">\n                      <Label className=\"flex flex-col items-start space-y-1\">\n                        <span className=\"leading-6 text-left\">\n                          {t(`${factor.factorName}.title`)}\n                          {factor.active && (\n                            <Badge variant=\"success\" className=\"ml-3\">\n                              {t('enrolled')}\n                            </Badge>\n                          )}\n                        </span>\n                        <p className=\"font-normal leading-snug text-muted-foreground text-left\">\n                          {t(`${factor.factorName}.description`)}\n                        </p>\n                      </Label>\n\n                      <div className=\"flex items-center justify-end space-x-24 md:min-w-72\">\n                        {factor.active\n                          ? !readOnly && (\n                              <Button\n                                type=\"submit\"\n                                onClick={() =>\n                                  handleDeleteClick(factor.id, factor.factorName as MFAType)\n                                }\n                                disabled={disableDelete || isDeletingFactor || !isEnabledFactor}\n                                aria-label={t('delete_factor', { factorName: factor.factorName })}\n                              >\n                                {t('delete')}\n                              </Button>\n                            )\n                          : !readOnly && (\n                              <Button\n                                onClick={() => handleEnrollClick(factor.factorName as MFAType)}\n                                disabled={disableEnroll || !isEnabledFactor}\n                              >\n                                {t('enroll')}\n                              </Button>\n                            )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </CardContent>\n        </Card>\n      )}\n      {enrollFactor && (\n        <EnrollmentForm\n          open={dialogOpen}\n          onClose={handleCloseDialog}\n          factorType={enrollFactor}\n          enrollMfa={enrollMfa}\n          confirmEnrollment={confirmEnrollment}\n          onSuccess={handleEnrollSuccess}\n          onError={handleEnrollError}\n        />\n      )}\n      <Dialog\n        open={isDeleteDialogOpen}\n        onOpenChange={(open) => !isDeletingFactor && setIsDeleteDialogOpen(open)}\n      >\n        <DialogContent aria-describedby=\"delete-mfa-description\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">{t('delete_mfa_title')}</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <p id=\"delete-mfa-description\" className=\"text-center text-muted-foreground\">\n              {t('delete_mfa_content')}\n            </p>\n          </div>\n          <div className=\"flex justify-end gap-4 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsDeleteDialogOpen(false)}\n              disabled={isDeletingFactor}\n            >\n              {t('cancel')}\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => factorToDelete && handleConfirmDelete(factorToDelete.id)}\n              disabled={isDeletingFactor}\n            >\n              {isDeletingFactor ? t('deleting') : t('delete')}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n",
      "type": "registry:block",
      "target": "blocks/manage-mfa.tsx"
    },
    {
      "path": "src/blocks/index.ts",
      "content": "export { ManageMfa } from './manage-mfa';\n",
      "type": "registry:file",
      "target": "blocks/index.ts"
    },
    {
      "path": "src/components/mfa/enrollment-form.tsx",
      "content": "import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport QRCode from 'react-qr-code';\n\nimport { MFAType, normalizeError, EnrollMfaResponse } from '@auth0-web-ui-components/core';\n\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from '@/components/ui/form';\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from '@/components/ui/input-otp';\nimport { Input } from '@/components/ui/input';\nimport { useI18n } from '@/hooks';\nimport {\n  SHOW_OTP,\n  ENTER_OTP,\n  ENTER_CONTACT,\n  FACTOR_TYPE_EMAIL,\n  FACTOR_TYPE_SMS,\n  FACTOR_TYPE_OTP,\n  FACTOR_TYPE_TOPT,\n  FACTOR_TYPE_PUSH_NOTIFICATION,\n  ENROLL,\n  CONFIRM,\n  EMAIL_PLACEHOLDER,\n  PHONE_NUMBER_PLACEHOLDER,\n} from '@/lib/constants';\n\nconst phoneRegex = /^\\+?[0-9\\s\\-()]{8,}$/;\n\ntype EnrollmentFormProps = {\n  open: boolean;\n  onClose: () => void;\n  factorType: MFAType;\n  enrollMfa: (factor: MFAType, options: Record<string, string>) => Promise<EnrollMfaResponse>;\n  confirmEnrollment: (\n    factor: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n  ) => Promise<unknown | null>;\n  onSuccess: () => void;\n  onError: (error: Error, stage: typeof ENROLL | typeof CONFIRM) => void;\n};\n\ntype ContactForm = {\n  contact: string;\n};\n\ntype OtpForm = {\n  userOtp: string;\n};\n\ntype EnrollmentPhase = typeof ENTER_CONTACT | typeof ENTER_OTP | typeof SHOW_OTP | null;\n\nexport function EnrollmentForm({\n  open,\n  onClose,\n  factorType,\n  enrollMfa,\n  confirmEnrollment,\n  onSuccess,\n  onError,\n}: EnrollmentFormProps) {\n  const t = useI18n('mfa');\n\n  // Initialize phase as null, meaning no UI shown by default\n  const [phase, setPhase] = React.useState<EnrollmentPhase>(null);\n  const [oobCode, setOobCode] = React.useState<string | undefined>(undefined);\n  const [otpData, setOtpData] = React.useState<{\n    secret: string | null;\n    barcodeUri: string | null;\n    recoveryCodes: string[];\n  }>({\n    secret: null,\n    barcodeUri: null,\n    recoveryCodes: [],\n  });\n  const [loading, setLoading] = React.useState(false);\n\n  // Create schema for validating contact input based on MFA type\n  const ContactSchema = React.useMemo(() => {\n    return factorType === FACTOR_TYPE_EMAIL\n      ? z.object({ contact: z.string().email({ message: t('errors.invalid_email') }) })\n      : z.object({\n          contact: z.string().regex(phoneRegex, { message: t('errors.invalid_phone_number') }),\n        });\n  }, [factorType]);\n\n  const formContact = useForm<ContactForm>({\n    resolver: zodResolver(ContactSchema),\n    mode: 'onChange',\n  });\n\n  const formOtp = useForm<OtpForm>({\n    mode: 'onChange',\n  });\n\n  React.useEffect(() => {\n    if (!open) {\n      setPhase(null); // reset phase to null when dialog closes\n      setOobCode(undefined);\n      setOtpData({ secret: null, barcodeUri: null, recoveryCodes: [] });\n      setLoading(false);\n      formContact.reset();\n      formOtp.reset();\n    }\n  }, [open, formContact, formOtp]);\n\n  React.useEffect(() => {\n    if (open && (factorType === FACTOR_TYPE_EMAIL || factorType === FACTOR_TYPE_SMS)) {\n      setPhase(ENTER_CONTACT);\n    }\n  }, [open, factorType]);\n\n  const onSubmitContact = async (data: ContactForm) => {\n    setLoading(true);\n    try {\n      const options: Record<string, string> =\n        factorType === FACTOR_TYPE_EMAIL\n          ? { email: data.contact }\n          : factorType === FACTOR_TYPE_SMS\n            ? { phone_number: data.contact }\n            : {};\n\n      const response = await enrollMfa(factorType, options);\n\n      if (response?.oob_code) {\n        setOobCode(response.oob_code);\n        setPhase(ENTER_OTP);\n      }\n\n      if (response?.authenticator_type === FACTOR_TYPE_OTP) {\n        setOtpData({\n          secret: response.secret ?? null,\n          barcodeUri: response.barcode_uri ?? null,\n          recoveryCodes: response.recovery_codes || [],\n        });\n        setPhase(SHOW_OTP);\n      }\n    } catch (error) {\n      const normalizedError = normalizeError(error, {\n        resolver: (code) => t(`errors.${code}.${factorType}`),\n        fallbackMessage: 'An unexpected error occurred during MFA enrollment.',\n      });\n      onError(normalizedError, ENROLL);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onSubmitOtp = async (data: OtpForm) => {\n    setLoading(true);\n\n    try {\n      const options = {\n        oobCode,\n        ...(factorType === FACTOR_TYPE_EMAIL\n          ? { userEmailOtpCode: data.userOtp }\n          : { userOtpCode: data.userOtp }),\n      };\n\n      const response = await confirmEnrollment(factorType, options);\n      if (response) {\n        onSuccess();\n        onClose();\n      }\n    } catch (err) {\n      const normalizedError = normalizeError(err, {\n        resolver: (code) => t(`errors.${code}.${factorType}`),\n        fallbackMessage: 'An unexpected error occurred during MFA enrollment.',\n      });\n      onError(normalizedError, CONFIRM);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchOtpEnrollment = React.useCallback(async () => {\n    try {\n      const response = await enrollMfa(factorType, {});\n      if (response?.authenticator_type === FACTOR_TYPE_OTP) {\n        setOtpData({\n          secret: response.secret ?? null,\n          barcodeUri: response.barcode_uri ?? null,\n          recoveryCodes: response.recovery_codes || [],\n        });\n      }\n      setPhase(SHOW_OTP);\n    } catch (error) {\n      const normalizedError = normalizeError(error, {\n        resolver: (code) => t(`errors.${code}.${factorType}`),\n        fallbackMessage: 'An unexpected error occurred during MFA enrollment.',\n      });\n      onError(normalizedError, ENROLL);\n      onClose();\n    } finally {\n      setLoading(false);\n    }\n  }, [factorType, enrollMfa, onError, onClose, t]);\n\n  // Automatically initiate OTP enrollment when factorType is 'totp' or 'push-notification'\n  React.useEffect(() => {\n    if (\n      [FACTOR_TYPE_TOPT, FACTOR_TYPE_PUSH_NOTIFICATION].includes(factorType) &&\n      !otpData.secret &&\n      open\n    ) {\n      setLoading(true);\n      fetchOtpEnrollment();\n    }\n  }, [factorType, fetchOtpEnrollment, otpData.secret, open]);\n\n  // Render the appropriate form based on the current phase and factorType\n  const renderForm = () => {\n    switch (phase) {\n      case ENTER_CONTACT:\n        return (\n          <div className=\"w-full max-w-sm mx-auto text-center\">\n            <Form {...formContact}>\n              <form onSubmit={formContact.handleSubmit(onSubmitContact)} className=\"space-y-6\">\n                <FormField\n                  control={formContact.control}\n                  name=\"contact\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {factorType === FACTOR_TYPE_EMAIL\n                          ? t('enrollment_form.email_address')\n                          : t('enrollment_form.phone_number')}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder={\n                            factorType === FACTOR_TYPE_EMAIL\n                              ? EMAIL_PLACEHOLDER\n                              : PHONE_NUMBER_PLACEHOLDER\n                          }\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-left\" />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" disabled={!formContact.formState.isValid || loading}>\n                  {loading ? t('enrollment_form.sending') : t('enrollment_form.send_code')}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        );\n      case SHOW_OTP:\n        return (\n          <div className=\"text-center\">\n            <p>{t('enrollment_form.show_otp.title')}</p>\n            <div className=\"flex justify-center items-center mt-6\">\n              <div className=\"border border-gray-300 p-4 rounded-lg shadow-lg bg-white inline-block\">\n                <QRCode\n                  size={150}\n                  style={{ height: 'auto', maxWidth: '100%', width: '100%' }}\n                  value={otpData.barcodeUri || ''}\n                  viewBox={`0 0 150 150`}\n                />\n              </div>\n            </div>\n            <div className=\"mt-6\">\n              {otpData.recoveryCodes.length > 0 && (\n                <div className=\"mb-6\">\n                  <p>\n                    <strong>{t('enrollment_form.show_otp.save_recovery')}</strong>\n                  </p>\n                  <ul className=\"list-none inline-block bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mt-2\">\n                    {otpData.recoveryCodes.map((code, index) => (\n                      <li key={index} className=\"font-mono tracking-widest\">\n                        {code}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n              <div className=\"w-full max-w-sm mx-auto text-center\">\n                <Form {...formOtp}>\n                  <form\n                    autoComplete=\"off\"\n                    onSubmit={formOtp.handleSubmit(onSubmitOtp)}\n                    className=\"space-y-6 mt-4\"\n                  >\n                    <FormField\n                      control={formOtp.control}\n                      name=\"userOtp\"\n                      key={phase}\n                      render={({ field }) => (\n                        <FormItem className=\"text-center\">\n                          <FormLabel className=\"block w-full text-sm font-medium text-center\">\n                            {t('enrollment_form.show_otp.enter_code')}\n                          </FormLabel>\n                          <FormControl>\n                            <div className=\"flex justify-center\">\n                              <InputOTP maxLength={6} {...field} autoComplete=\"one-time-code\">\n                                <InputOTPGroup>\n                                  <InputOTPSlot index={0} />\n                                  <InputOTPSlot index={1} />\n                                  <InputOTPSlot index={2} />\n                                  <InputOTPSlot index={3} />\n                                  <InputOTPSlot index={4} />\n                                  <InputOTPSlot index={5} />\n                                </InputOTPGroup>\n                              </InputOTP>\n                            </div>\n                          </FormControl>\n                          <FormMessage className=\"text-left\" />\n                        </FormItem>\n                      )}\n                    />\n                    <Button type=\"submit\" disabled={loading}>\n                      {loading\n                        ? t('enrollment_form.show_otp.verifying')\n                        : t('enrollment_form.show_otp.verify_code')}\n                    </Button>\n                  </form>\n                </Form>\n              </div>\n            </div>\n          </div>\n        );\n      case ENTER_OTP:\n        return (\n          <div className=\"w-full max-w-sm mx-auto text-center\">\n            <Form {...formOtp}>\n              <form\n                onSubmit={formOtp.handleSubmit(onSubmitOtp)}\n                autoComplete=\"off\"\n                className=\"space-y-6\"\n              >\n                <FormField\n                  control={formOtp.control}\n                  key={phase}\n                  name=\"userOtp\"\n                  render={({ field }) => (\n                    <FormItem className=\"text-center\">\n                      <FormLabel className=\"block w-full text-sm font-medium text-center\">\n                        {t('enrollment_form.show_otp.enter_verify_code')}\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"flex justify-center\">\n                          <InputOTP maxLength={6} {...field} autoComplete=\"one-time-code\">\n                            <InputOTPGroup>\n                              <InputOTPSlot index={0} />\n                              <InputOTPSlot index={1} />\n                              <InputOTPSlot index={2} />\n                              <InputOTPSlot index={3} />\n                              <InputOTPSlot index={4} />\n                              <InputOTPSlot index={5} />\n                            </InputOTPGroup>\n                          </InputOTP>\n                        </div>\n                      </FormControl>\n                      <FormMessage className=\"text-left\" />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" disabled={loading}>\n                  {loading\n                    ? t('enrollment_form.show_otp.verifying')\n                    : t('enrollment_form.show_otp.verify_code')}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={open && Boolean(phase)} onOpenChange={onClose}>\n      <DialogContent aria-describedby={factorType}>\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            {factorType === FACTOR_TYPE_EMAIL\n              ? t('enrollment_form.enroll_email')\n              : factorType === FACTOR_TYPE_SMS\n                ? t('enrollment_form.enroll_sms')\n                : t('enroll_otp_mfa')}\n          </DialogTitle>\n        </DialogHeader>\n        {renderForm()}\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/mfa/enrollment-form.tsx"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',\n        outline: 'text-foreground',\n        success: 'border-transparent bg-green-500 text-white hover:bg-green-600',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:component",
      "target": "components/ui/badge.tsx"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component",
      "target": "components/ui/button.tsx"
    },
    {
      "path": "src/components/ui/card.tsx",
      "content": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn('col-start-2 row-span-2 row-start-1 self-start justify-self-end', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-content\" className={cn('px-6', className)} {...props} />;\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent };\n",
      "type": "registry:component",
      "target": "components/ui/card.tsx"
    },
    {
      "path": "src/components/ui/dialog.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { XIcon } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nfunction Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean;\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn('flex flex-col-reverse gap-2 sm:flex-row sm:justify-end', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogTitle({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:component",
      "target": "components/ui/dialog.tsx"
    },
    {
      "path": "src/components/ui/form.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { Slot } from '@radix-ui/react-slot';\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form';\n\nimport { cn } from '@/lib/utils';\nimport { Label } from '@/components/ui/label';\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState } = useFormContext();\n  const formState = useFormState({ name: fieldContext.name });\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>');\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div data-slot=\"form-item\" className={cn('grid gap-2', className)} {...props} />\n    </FormItemContext.Provider>\n  );\n}\n\nfunction FormLabel({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message ?? '') : props.children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n",
      "type": "registry:component",
      "target": "components/ui/form.tsx"
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n",
      "type": "registry:component",
      "target": "components/ui/input.tsx"
    },
    {
      "path": "src/components/ui/input-otp.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { OTPInput, OTPInputContext } from 'input-otp';\nimport { MinusIcon } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string;\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn('flex items-center gap-2 has-disabled:opacity-50', containerClassName)}\n      className={cn('disabled:cursor-not-allowed', className)}\n      {...props}\n    />\n  );\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div data-slot=\"input-otp-group\" className={cn('flex items-center', className)} {...props} />\n  );\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<'div'> & {\n  index: number;\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext);\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {};\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  );\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n",
      "type": "registry:component",
      "target": "components/ui/input-otp.tsx"
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\n\nimport { cn } from '@/lib/utils';\n\nfunction Label({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n",
      "type": "registry:component",
      "target": "components/ui/label.tsx"
    },
    {
      "path": "src/components/ui/separator.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\n\nimport { cn } from '@/lib/utils';\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Separator };\n",
      "type": "registry:component",
      "target": "components/ui/separator.tsx"
    },
    {
      "path": "src/components/ui/sonner.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { useTheme } from 'next-themes';\nimport { Toaster as Sonner, ToasterProps } from 'sonner';\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  );\n};\n\nexport { Toaster };\n",
      "type": "registry:component",
      "target": "components/ui/sonner.tsx"
    },
    {
      "path": "src/hooks/use-i18n.ts",
      "content": "import * as React from 'react';\nimport { I18nContext } from '@/providers/i18n-provider';\n\n/**\n * React hook for using translations within a specific namespace.\n * Supports both global translations and local overrides.\n *\n * @param namespace - Translation namespace (e.g., 'mfa', 'auth')\n * @param overrides - Optional translations to override defaults\n * @returns Scoped translation function\n */\nexport function useI18n(namespace: string, overrides?: Record<string, unknown>) {\n  const { translator, initialized } = React.useContext(I18nContext);\n\n  // Memoize overrides to prevent unnecessary re-renders\n  const memoizedOverrides = React.useMemo(() => overrides, [JSON.stringify(overrides)]);\n\n  return React.useCallback(\n    (key: string, vars?: Record<string, unknown>): string => {\n      if (!initialized || !translator) {\n        return key;\n      }\n\n      return translator(namespace)(key, vars, memoizedOverrides);\n    },\n    [namespace, translator, initialized, memoizedOverrides],\n  );\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-i18n.ts"
    },
    {
      "path": "src/hooks/use-mfa.ts",
      "content": "import { useCallback } from 'react';\nimport { useComponentConfig } from './use-config';\nimport { useI18n } from './use-i18n';\nimport { useAccessToken } from './use-access-token';\nimport {\n  fetchMfaFactors,\n  enrollMfaRequest,\n  deleteMfaFactor,\n  confirmMfaEnrollmentRequest,\n} from '@auth0-web-ui-components/core';\nimport type {\n  MFAType,\n  EnrollMfaParams,\n  EnrollMfaResponse,\n  Authenticator,\n  ConfirmMfaEnrollmentParams,\n} from '@auth0-web-ui-components/core';\nimport type { EnrollOptions } from '@/types';\nimport {\n  FACTOR_TYPE_EMAIL,\n  FACTOR_TYPE_PUSH_NOTIFICATION,\n  FACTOR_TYPE_SMS,\n  FACTOR_TYPE_TOPT,\n} from '@/lib/constants';\n\n/**\n * Describes the methods returned by the `useMFA` hook for managing multi-factor authentication.\n * @interface UseMfaResult\n */\nexport interface UseMfaResult {\n  /**\n   * Fetches the list of MFA authenticators for the current user.\n   * @param {boolean} [onlyActive=false] - If true, returns only factors that are actively enrolled.\n   * @returns {Promise<Authenticator[]>} A promise that resolves with the list of authenticators.\n   * @throws An error if the API request fails or prerequisites (e.g., `apiBaseUrl`) are missing.\n   */\n  fetchFactors: (onlyActive?: boolean) => Promise<Authenticator[]>;\n  /**\n   * Initiates the enrollment process for a new MFA factor.\n   * @param {MFAType} factorName - The type of factor to enroll (e.g., 'sms', 'totp').\n   * @param {EnrollOptions} [options={}] - Factor-specific data required for enrollment (e.g., `phone_number` for SMS).\n   * @returns {Promise<EnrollMfaResponse>} A promise that resolves with the enrollment response, which may contain data like an `oob_code` or QR code URI.\n   * @throws An error if the API request fails or required options are missing.\n   */\n  enrollMfa: (factorName: MFAType, options?: EnrollOptions) => Promise<EnrollMfaResponse>;\n  /**\n   * Deletes a previously enrolled MFA factor.\n   * @param {string} authenticatorId - The unique ID of the authenticator to delete.\n   * @returns {Promise<void>} A promise that resolves when the deletion is successful.\n   * @throws An error if the API request fails.\n   */\n  deleteMfa: (authenticatorId: string) => Promise<void>;\n  /**\n   * Confirms an MFA enrollment, typically by verifying a code provided by the user.\n   * @param {MFAType} factorName - The type of factor being confirmed.\n   * @param {object} options - The verification data, such as `oobCode` and `userOtpCode`.\n   * @returns {Promise<unknown>} A promise that resolves with the confirmation response from the server.\n   * @throws An error if the API request fails or prerequisites are missing.\n   */\n  confirmEnrollment: (\n    factorName: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n  ) => Promise<unknown>;\n}\n\n/**\n * A custom React hook for managing all Multi-Factor Authentication (MFA) operations.\n *\n * This hook abstracts the complexity of fetching, enrolling, confirming, and deleting MFA factors.\n * It handles access token management automatically and provides a clean, promise-based API\n * for interacting with the MFA endpoints in either a proxy or non-proxy environment.\n *\n * @returns {UseMfaResult} An object containing the functions to manage MFA factors.\n */\nexport function useMFA(): UseMfaResult {\n  const {\n    config: { authDetails, apiBaseUrl, isProxyMode },\n  } = useComponentConfig();\n  const t = useI18n('common');\n  const mfaScopes = ['read:authenticators', 'remove:authenticators', 'enroll'];\n\n  const { getToken: getMfaToken } = useAccessToken(mfaScopes.join(' '), 'mfa');\n\n  /**\n   * A higher-order function that handles token fetching and prerequisite validation\n   * before executing a given API task.\n   * @param task - The async function to execute, which receives the optional access token.\n   * @private\n   */\n  const withMfaToken = useCallback(\n    async <T>(task: (token?: string) => Promise<T>): Promise<T> => {\n      if (!apiBaseUrl) throw new Error(t('errors.missing_base_url')!);\n\n      const token = isProxyMode ? undefined : await getMfaToken();\n      if (!isProxyMode && !token) throw new Error(t('errors.missing_access_token')!);\n\n      return task(token);\n    },\n    [apiBaseUrl, isProxyMode, getMfaToken, t],\n  );\n\n  /**\n   * Builds the parameters for an MFA enrollment request.\n   * @private\n   */\n  const buildEnrollParams = (factorName: MFAType, options: EnrollOptions = {}): EnrollMfaParams => {\n    switch (factorName) {\n      case FACTOR_TYPE_SMS:\n        if (!options.phone_number) throw new Error(t('errors.phone_number_required'));\n        return {\n          authenticator_types: ['oob'],\n          oob_channels: ['sms'],\n          phone_number: options.phone_number,\n        };\n      case FACTOR_TYPE_EMAIL:\n        if (!options.email) throw new Error(t('errors.email_required'));\n        return { authenticator_types: ['oob'], oob_channels: ['email'], email: options.email };\n      case FACTOR_TYPE_TOPT:\n        return { authenticator_types: ['otp'] };\n      case FACTOR_TYPE_PUSH_NOTIFICATION:\n        return { authenticator_types: ['oob'], oob_channels: ['auth0'] };\n      default:\n        throw new Error(t('errors.email_required', { factorName }));\n    }\n  };\n\n  /**\n   * Builds the parameters for an MFA confirmation request.\n   * @private\n   */\n  const buildConfirmParams = (\n    factorName: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n    token?: string,\n  ): ConfirmMfaEnrollmentParams => {\n    const baseParams: ConfirmMfaEnrollmentParams = {\n      grant_type:\n        factorName === FACTOR_TYPE_TOPT\n          ? 'http://auth0.com/oauth/grant-type/mfa-otp'\n          : 'http://auth0.com/oauth/grant-type/mfa-oob',\n      oob_code: options.oobCode,\n      client_id: !isProxyMode ? authDetails?.clientId : undefined,\n      mfa_token: token,\n    };\n\n    if (factorName === FACTOR_TYPE_TOPT) {\n      baseParams.otp = options.userOtpCode;\n    } else if (\n      [FACTOR_TYPE_SMS, FACTOR_TYPE_EMAIL, FACTOR_TYPE_PUSH_NOTIFICATION].includes(factorName)\n    ) {\n      baseParams.binding_code =\n        factorName === FACTOR_TYPE_SMS\n          ? options.userOtpCode\n          : factorName === FACTOR_TYPE_EMAIL\n            ? options.userEmailOtpCode\n            : options.userOtpCode;\n    }\n    return baseParams;\n  };\n\n  const fetchFactors = useCallback(\n    (onlyActive = false) =>\n      withMfaToken((token) => fetchMfaFactors(apiBaseUrl!, token, onlyActive)),\n    [withMfaToken, apiBaseUrl],\n  );\n\n  const enrollMfa = useCallback(\n    (factorName: MFAType, options: EnrollOptions = {}) =>\n      withMfaToken((token) => {\n        const params = buildEnrollParams(factorName, options);\n        return enrollMfaRequest(apiBaseUrl!, params, token);\n      }),\n    [withMfaToken, apiBaseUrl],\n  );\n\n  const deleteMfa = useCallback(\n    (authenticatorId: string) =>\n      withMfaToken((token) => deleteMfaFactor(apiBaseUrl!, authenticatorId, token)),\n    [withMfaToken, apiBaseUrl],\n  );\n\n  const confirmEnrollment = useCallback(\n    (\n      factorName: MFAType,\n      options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n    ) =>\n      withMfaToken((token) => {\n        if (!isProxyMode && !authDetails?.domain) throw new Error(t('errors.missing_domain')!);\n        const params = buildConfirmParams(factorName, options, token);\n        return confirmMfaEnrollmentRequest(apiBaseUrl!, params, token);\n      }),\n    [withMfaToken, apiBaseUrl, isProxyMode, authDetails, t],\n  );\n\n  return {\n    fetchFactors,\n    enrollMfa,\n    deleteMfa,\n    confirmEnrollment,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-mfa.ts"
    },
    {
      "path": "src/hooks/use-config.ts",
      "content": "import * as React from 'react';\nimport { Auth0ComponentContext } from '@/providers/context';\nimport type { Auth0ComponentConfig } from '@/providers/types';\n\n/**\n * Hook to access the Auth0 component configuration from context.\n *\n * Provides authentication mode, internationalization settings, and theming config.\n *\n * @returns {{ config: Auth0ComponentConfig }} The current Auth0 component configuration.\n *\n * @throws {Error} Throws if used outside of an Auth0ComponentProvider.\n *\n * @example\n * ```tsx\n * function AuthenticatedButton() {\n *   const { config } = useAuth0ComponentConfig();\n *\n *\n *   const isDark = config.themeSettings?.mode === 'dark';\n *\n *   return (\n *     <button className={isDark ? 'dark' : 'light'}>\n *       {config.isProxyMode ? 'RWA Mode' : 'SPA Mode'}\n *     </button>\n *   );\n * }\n * ```\n */\nexport function useComponentConfig(): { config: Auth0ComponentConfig } {\n  const context = React.useContext(Auth0ComponentContext);\n\n  if (!context) {\n    throw new Error('useComponentConfig must be used within an Auth0ComponentProvider');\n  }\n\n  return context;\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-config.ts"
    },
    {
      "path": "src/hooks/use-access-token.ts",
      "content": "import * as React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useComponentConfig } from './use-config';\nimport { useI18n } from './use-i18n';\n\n/**\n * Describes the object returned by the `useAccessToken` hook.\n * @interface UseAccessTokenResult\n */\ninterface UseAccessTokenResult {\n  /**\n   * Fetches an Auth0 access token, handling caching, deduplication, and popup fallbacks.\n   * @param {boolean} [ignoreCache=false] - If true, forces a new token request, bypassing the SDK's cache.\n   * @returns {Promise<string>} A promise that resolves with the access token.\n   * @throws An error if the token cannot be obtained. This must be handled with a `try...catch` block.\n   */\n  getToken: (ignoreCache?: boolean) => Promise<string>;\n  /**\n   * A static error object present only if the Auth0 domain is not configured.\n   * Does not report runtime errors from `getToken`.\n   */\n  error: Error | null;\n}\n\n/**\n * A React hook to get Auth0 access tokens.\n *\n * This hook simplifies token retrieval by providing request deduplication (preventing\n * multiple requests for the same token) and automatically handling the popup fallback\n * if user consent is required. It relies on the Auth0 SDK's internal cache,\n * which respects token expiration.\n *\n * @param {string} scope - The space-separated OAuth scopes required for the token (e.g., \"read:users\").\n * @param {string} audiencePath - The path segment of the API audience (e.g., \"api/v2\"), which is appended to the domain.\n * @returns {UseAccessTokenResult} An object containing the `getToken` function and a potential configuration error.\n *\n * @example\n * ```tsx\n * function UserProfile() {\n * const { getToken, error } = useAccessToken('read:current_user', 'api/v2');\n *\n * const fetchProfile = async () => {\n * try {\n * const token = await getToken();\n * const response = await fetch('[https://my-api.com/profile](https://my-api.com/profile)', {\n * headers: { Authorization: `Bearer ${token}` },\n * });\n * // ... handle response\n * } catch (err) {\n * console.error(\"Failed to fetch profile:\", err);\n * // Handle error, e.g., show a notification to the user\n * }\n * };\n *\n * return <button onClick={fetchProfile}>Load Profile</button>;\n * }\n * ```\n */\nexport function useAccessToken(scope: string, audiencePath: string): UseAccessTokenResult {\n  const { getAccessTokenSilently, getAccessTokenWithPopup } = useAuth0();\n  const {\n    config: { authDetails },\n  } = useComponentConfig();\n  const t = useI18n('common');\n  const domain = authDetails?.domain;\n\n  if (authDetails?.scopes?.includes(scope) && authDetails.accessToken) {\n    return {\n      getToken: async () => authDetails.accessToken as string,\n      error: null,\n    };\n  }\n\n  const pendingPromiseRef = React.useRef<Promise<string> | null>(null);\n  const audience = domain ? `${domain}${audiencePath}/` : '';\n\n  const getToken = React.useCallback(\n    async (ignoreCache = false): Promise<string> => {\n      if (!domain) {\n        throw new Error(t('errors.domain_not_configured'));\n      }\n      if (!scope) {\n        throw new Error(t('errors.scope_required'));\n      }\n\n      if (pendingPromiseRef.current) {\n        return pendingPromiseRef.current;\n      }\n\n      const fetchToken = async (): Promise<string> => {\n        try {\n          const token = await getAccessTokenSilently({\n            authorizationParams: {\n              audience,\n              scope,\n            },\n            ...(ignoreCache ? { cacheMode: 'off' } : {}),\n          });\n\n          if (!token) throw new Error(t('errors.access_token_error'));\n\n          return token;\n        } catch (error) {\n          const token = await getAccessTokenWithPopup({\n            authorizationParams: {\n              audience,\n              scope,\n              prompt: 'consent',\n            },\n          });\n\n          if (!token) throw new Error(t('errors.popup_closed_or_failed'));\n\n          return token;\n        }\n      };\n\n      try {\n        pendingPromiseRef.current = fetchToken();\n        const token = await pendingPromiseRef.current;\n        return token;\n      } finally {\n        pendingPromiseRef.current = null;\n      }\n    },\n    [domain, scope, audience, getAccessTokenSilently, getAccessTokenWithPopup, t],\n  );\n\n  return {\n    getToken,\n    error: !domain ? new Error(t('errors.domain_not_configured')) : null,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-access-token.ts"
    },
    {
      "path": "src/hooks/use-theme.ts",
      "content": "'use client';\n\nimport { useContext } from 'react';\nimport { ThemeContext } from '@/providers/theme-provider';\n\n/**\n * useTheme\n *\n * Access the current theme from context. Includes:\n * - branding (UL theme)\n * - customerOverrides (CSS variables)\n * - mergedTheme (computed result)\n */\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-theme.ts"
    },
    {
      "path": "src/hooks/index.ts",
      "content": "export { useAccessToken } from './use-access-token';\nexport { useComponentConfig } from './use-config';\nexport { useI18n } from './use-i18n';\nexport { useMFA } from './use-mfa';\nexport { useTheme } from './use-theme';\n",
      "type": "registry:file",
      "target": "hooks/index.ts"
    },
    {
      "path": "src/providers/context.ts",
      "content": "import * as React from 'react';\nimport type { Auth0ComponentConfig, AuthDetails } from './types';\n\n/**\n * Auth0ComponentContext\n *\n * React Context that provides configuration and authentication state\n * related to Auth0 integration throughout the component tree.\n *\n * The context value includes:\n * - `config`: An object containing:\n *    - `i18n`: Internationalization settings (current and fallback languages).\n *    - `themeSettings`: Theme and branding configurations.\n *    - `customOverrides`: Optional CSS variable overrides.\n *    - `isProxyMode`: Boolean indicating whether proxy mode is active.\n *    - `apiBaseUrl`: Base URL used for API calls (proxy URL or Auth0 domain).\n *    - `authDetails` (optional): Authentication details such as access tokens,\n *      domain, client ID, scopes, loading state, and any errors. Present only in SPA mode.\n *\n * This context is intended to be consumed by any component needing access to Auth0 configuration,\n * theming, internationalization, or authentication status.\n */\nexport const Auth0ComponentContext = React.createContext<{\n  config: Auth0ComponentConfig & {\n    authDetails?: AuthDetails;\n    isProxyMode: boolean;\n    apiBaseUrl: string;\n  };\n}>({\n  config: {\n    i18n: { currentLanguage: 'en-US', fallbackLanguage: 'en-US' },\n    themeSettings: { mode: 'light' },\n    customOverrides: {},\n    isProxyMode: false,\n    apiBaseUrl: '',\n  },\n});\n",
      "type": "registry:file",
      "target": "providers/context.ts"
    },
    {
      "path": "src/providers/types.ts",
      "content": "import * as React from 'react';\n/**\n * Theme configuration for the Auth0 components\n * @property {('light'|'dark')} [mode] - Theme mode\n * @property {string} [primaryColor] - Primary color for theming\n */\nexport interface ThemeSettings {\n  mode?: 'light' | 'dark';\n  primaryColor?: string;\n  [key: string]: unknown;\n}\n\n/**\n * Configuration options for Auth0ComponentProvider\n *\n * Defines configuration for authentication, internationalization, and theming.\n * Also optionally includes runtime authentication state in SPA mode.\n *\n * @property {string} [authProxyUrl] - Optional URL for authentication proxy in RWA (proxy) mode.\n *                                      If provided, authentication is handled externally and no tokens are fetched.\n *\n * @property {I18nOptions} [i18n] - Internationalization settings including current and fallback languages.\n *\n *\n * @property {ThemeSettings} [themeSettings] - UI theme configuration, such as light/dark mode and primary color.\n *\n * @property {AuthDetails} [authDetails] - Runtime authentication state, populated in SPA (non-proxy) mode.\n *                                         Includes access token, domain, client ID, scopes, loading, and error info.\n */\nexport interface Auth0ComponentConfig {\n  authProxyUrl?: string;\n  i18n?: I18nOptions;\n  themeSettings?: ThemeSettings;\n  authDetails?: AuthDetails;\n  customOverrides?: CustomOverrides;\n  isProxyMode?: boolean;\n  apiBaseUrl?: string;\n  loader?: React.ReactNode;\n}\n\nexport interface I18nOptions {\n  currentLanguage: string;\n  fallbackLanguage?: string;\n}\n\n/**\n * Auth0 authentication details fetched from SDK\n */\nexport interface AuthDetails {\n  accessToken: string | undefined;\n  domain: string | undefined;\n  clientId: string | undefined;\n  scopes: string | undefined;\n  loading: boolean;\n  error?: Error;\n}\n\n/**\n * BrandingTheme\n *\n * Controlled UL branding configuration.\n */\nexport type BrandingTheme = {\n  mode?: 'light' | 'dark' | 'system';\n  primaryColor?: string;\n  borderRadius?: number;\n  fontFamily?: string;\n  [key: string]: unknown;\n};\n\n/**\n * CustomerOverrides\n *\n * Custom CSS variable overrides (e.g. \"--button-radius\": \"6px\").\n */\nexport type CustomOverrides = Record<string, string>;\n\n/**\n * ThemeInput\n *\n * Optional props passed into the ThemeProvider.\n */\nexport type ThemeInput = {\n  branding?: BrandingTheme;\n  customOverrides?: CustomOverrides;\n};\n\n/**\n * ThemeContextValue\n *\n * The values made available through the ThemeContext.\n */\nexport type ThemeContextValue = {\n  branding: BrandingTheme;\n  customOverrides: CustomOverrides;\n  mergedTheme: Record<string, unknown>;\n};\n\n/**\n * A function that performs string translation within a namespace.\n *\n * @param key - Translation key relative to namespace\n * @param vars - Optional variables for interpolation\n * @param overrides - Optional translation overrides\n */\ntype TranslationFunction = (\n  key: string,\n  vars?: Record<string, unknown>,\n  overrides?: Record<string, unknown>,\n) => string;\n\n/**\n * Factory function that creates namespace-scoped translation functions.\n *\n * @param namespace - Translation namespace (e.g., \"mfa\", \"login\")\n */\nexport type TFactory = (namespace: string) => TranslationFunction;\n\n/** Defines the value provided by the i18n context. */\nexport interface I18nContextValue {\n  /** The factory to create `t` functions. Null until initialized. */\n  translator: TFactory | null;\n  initialized: boolean;\n}\n",
      "type": "registry:file",
      "target": "providers/types.ts"
    },
    {
      "path": "src/providers/component-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport type { Auth0ComponentConfig } from './types';\nimport { ProxyModeProvider } from './proxy-mode-provider';\nimport type { TFactory } from '@auth0-web-ui-components/core';\nimport { createI18n } from '@auth0-web-ui-components/core';\nimport { I18nContext } from './i18n-provider';\nimport { Spinner } from '@/components/ui/spinner';\n\nconst SpaModeProvider = React.lazy(() => import('./spa-mode-provider'));\n\n/**\n * Auth0ComponentProvider\n *\n * The main Auth0 context provider component that conditionally\n * renders either the Proxy Mode or SPA Mode provider based on the presence\n * of `authProxyUrl`.\n *\n * - **Proxy Mode:** Used when authentication is handled externally via a proxy server.\n * - **SPA Mode:** Used when authentication is handled client-side using the Auth0 SPA SDK.\n *\n * This component abstracts the complexity of choosing the correct mode from the end user.\n *\n * @param {Object} props - Configuration props.\n * @param {string} [props.authProxyUrl] - Optional URL for proxy mode. When provided,\n *                                       enables proxy mode; otherwise, SPA mode is used.\n * @param {React.ReactNode} props.children - Child components that require authentication context.\n * @param {Object} [props.i18n] - Internationalization configuration (language, fallback).\n * @param {Object} [props.themeSettings] - Theme and branding settings.\n * @param {Object} [props.customOverrides] - Optional CSS variable overrides for styling.\n * @param {React.ReactNode} [props.loader] - Custom loading component to show while\n *                                                    authentication is initializing.\n *                                                    Defaults to \"Loading authentication...\".\n *\n * @returns {JSX.Element} The provider component for Auth0 context.\n *\n * @example\n * ```tsx\n * <Auth0ComponentProvider\n *   authProxyUrl=\"/api/auth\"\n *   i18n={{ currentLanguage: 'en', fallbackLanguage: 'en' }}\n *   themeSettings={{ mode: 'dark' }}\n * >\n *   <App />\n * </Auth0ComponentProvider>\n * ```\n */\nexport const Auth0ComponentProvider = ({\n  authProxyUrl,\n  i18n,\n  ...props\n}: Auth0ComponentConfig & { children: React.ReactNode }) => {\n  const isProxyMode = Boolean(authProxyUrl);\n  const [i18nState, setI18nState] = React.useState<{\n    initialized: boolean;\n    translator: TFactory | null;\n  }>({\n    initialized: false,\n    translator: null,\n  });\n\n  React.useEffect(() => {\n    if (!i18n?.currentLanguage) {\n      setI18nState({ initialized: true, translator: null });\n      return;\n    }\n\n    const initializeTranslations = async () => {\n      try {\n        const instance = await createI18n({\n          currentLanguage: i18n.currentLanguage,\n          fallbackLanguage: i18n.fallbackLanguage,\n        });\n\n        setI18nState({\n          initialized: true,\n          translator: instance.t,\n        });\n      } catch {\n        setI18nState({\n          initialized: true,\n          translator: null,\n        });\n      }\n    };\n\n    initializeTranslations();\n  }, [i18n?.currentLanguage, i18n?.fallbackLanguage]);\n\n  const i18nValue = React.useMemo(\n    () => ({\n      translator: i18nState.translator,\n      initialized: i18nState.initialized,\n    }),\n    [i18nState.translator, i18nState.initialized],\n  );\n\n  return (\n    <I18nContext.Provider value={i18nValue}>\n      {isProxyMode ? (\n        <ProxyModeProvider {...props} authProxyUrl={authProxyUrl} />\n      ) : (\n        <React.Suspense fallback={props.loader || <Spinner />}>\n          <SpaModeProvider {...props} />\n        </React.Suspense>\n      )}\n    </I18nContext.Provider>\n  );\n};\n",
      "type": "registry:file",
      "target": "providers/component-provider.tsx"
    },
    {
      "path": "src/providers/i18n-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport type { I18nContextValue } from './types';\n\n/**\n * React Context for providing i18n state throughout the component tree.\n */\nexport const I18nContext = React.createContext<I18nContextValue>({\n  translator: null,\n  initialized: false,\n});\n",
      "type": "registry:file",
      "target": "providers/i18n-provider.tsx"
    },
    {
      "path": "src/providers/proxy-mode-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport type { Auth0ComponentConfig } from './types';\nimport { Auth0ComponentContext } from './context';\nimport { ThemeProvider } from './theme-provider';\n\n/**\n * ProxyModeProvider\n *\n * Provides Auth0 configuration and theming when using proxy mode,\n * where authentication is handled externally (e.g., server-side or via a proxy).\n *\n * This component sets up the context with proxy mode enabled and supplies\n * the proxy URL as the API base URL. It also applies theming via the ThemeProvider.\n *\n * @param children - React children components that require Auth0 context and theming\n * @param i18n - Internationalization settings including current and fallback languages (default: English US)\n * @param themeSettings - Theme and branding settings, e.g., mode (default: light)\n * @param customOverrides - Optional CSS variable overrides for custom styling\n * @param authProxyUrl - URL of the authentication proxy handling Auth0 auth flows externally\n *\n * @example\n * ```tsx\n * <ProxyModeProvider\n *   authProxyUrl=\"/api/auth\"\n *   i18n={{ currentLanguage: 'en', fallbackLanguage: 'en' }}\n *   themeSettings={{ mode: 'dark' }}\n *   customOverrides={{ '--font-size': '16px' }}\n * >\n *   <App />\n * </ProxyModeProvider>\n * ```\n */\nexport function ProxyModeProvider({\n  children,\n  i18n = { currentLanguage: 'en-US', fallbackLanguage: 'en-US' },\n  themeSettings = { mode: 'light' },\n  customOverrides = {},\n  authProxyUrl = '',\n  loader,\n}: Auth0ComponentConfig & { children: React.ReactNode; authProxyUrl?: string }) {\n  const config = React.useMemo(\n    () => ({\n      i18n,\n      themeSettings,\n      customOverrides,\n      isProxyMode: true,\n      apiBaseUrl: authProxyUrl,\n      loader,\n    }),\n    [i18n, themeSettings, customOverrides, authProxyUrl],\n  );\n\n  return (\n    <Auth0ComponentContext.Provider value={{ config }}>\n      <ThemeProvider theme={{ branding: themeSettings, customOverrides }}>{children}</ThemeProvider>\n    </Auth0ComponentContext.Provider>\n  );\n}\n",
      "type": "registry:file",
      "target": "providers/proxy-mode-provider.tsx"
    },
    {
      "path": "src/providers/spa-mode-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport type { Auth0ComponentConfig, AuthDetails } from './types';\nimport { Auth0ComponentContext } from './context';\nimport { ThemeProvider } from './theme-provider';\n\n/**\n * SpaModeProvider\n *\n * Provides Auth0 authentication details and theming for Single Page Applications (SPA) mode,\n * where Auth0 is integrated directly via the `@auth0/auth0-react` SDK.\n *\n * This component fetches the user's authentication details such as access token, domain,\n * client ID, and scopes by calling Auth0 SDK hooks. It manages authentication state internally\n * and updates the context accordingly.\n *\n * It also wraps children with a ThemeProvider to apply branding and custom style overrides.\n *\n * @param children - React children components that require Auth0 context and theming\n * @param i18n - Internationalization settings including current and fallback languages (default: English US)\n * @param themeSettings - Theme and branding settings, e.g., mode (default: light)\n * @param customOverrides - Optional CSS variable overrides for custom styling\n *\n * @example\n * ```tsx\n * <SpaModeProvider\n *   i18n={{ currentLanguage: 'en', fallbackLanguage: 'en' }}\n *   themeSettings={{ mode: 'dark' }}\n *   customOverrides={{ '--font-size': '16px' }}\n * >\n *   <App />\n * </SpaModeProvider>\n * ```\n */\nfunction SpaModeProvider({\n  children,\n  i18n = { currentLanguage: 'en-US', fallbackLanguage: 'en-US' },\n  themeSettings = { mode: 'light' },\n  customOverrides = {},\n  loader,\n}: Auth0ComponentConfig & { children: React.ReactNode }) {\n  const { getIdTokenClaims, getAccessTokenSilently } = useAuth0();\n\n  const [authDetails, setAuthDetails] = React.useState<AuthDetails>({\n    accessToken: undefined,\n    domain: undefined,\n    clientId: undefined,\n    scopes: undefined,\n    loading: true,\n    error: undefined,\n  });\n\n  React.useEffect(() => {\n    const fetchAuth = async () => {\n      try {\n        const tokenRes = await getAccessTokenSilently({\n          cacheMode: 'off',\n          detailedResponse: true,\n        });\n        const claims = await getIdTokenClaims();\n\n        setAuthDetails({\n          accessToken: tokenRes.access_token,\n          domain: claims?.iss,\n          clientId: claims?.aud,\n          scopes: tokenRes.scope,\n          loading: false,\n          error: undefined,\n        });\n      } catch (err) {\n        setAuthDetails({\n          accessToken: undefined,\n          domain: undefined,\n          clientId: undefined,\n          scopes: undefined,\n          loading: false,\n          error: err instanceof Error ? err : new Error(String(err)),\n        });\n      }\n    };\n\n    fetchAuth();\n  }, [getIdTokenClaims, getAccessTokenSilently]);\n\n  const apiBaseUrl = authDetails.domain ?? '';\n\n  const config = React.useMemo(\n    () => ({\n      i18n,\n      themeSettings,\n      customOverrides,\n      isProxyMode: false,\n      apiBaseUrl,\n      authDetails,\n      loader,\n    }),\n    [i18n, themeSettings, customOverrides, apiBaseUrl, authDetails],\n  );\n  return (\n    <Auth0ComponentContext.Provider value={{ config }}>\n      <ThemeProvider theme={{ branding: themeSettings, customOverrides }}>{children}</ThemeProvider>\n    </Auth0ComponentContext.Provider>\n  );\n}\n\nexport default SpaModeProvider;\n",
      "type": "registry:file",
      "target": "providers/spa-mode-provider.tsx"
    },
    {
      "path": "src/providers/theme-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { mergeThemes } from '@/lib/utils';\nimport type { BrandingTheme, CustomOverrides, ThemeContextValue, ThemeInput } from './types';\n\n/**\n * Default branding theme if none is provided.\n */\nconst defaultBranding: BrandingTheme = {\n  mode: 'light',\n};\n\n/**\n * Default empty customer overrides.\n */\nconst defaultCustomOverrides: CustomOverrides = {};\n\n/**\n * ThemeContext\n *\n * Provides access to branding theme, customer overrides,\n * and a merged theme object for convenience.\n */\nexport const ThemeContext = React.createContext<ThemeContextValue>({\n  branding: defaultBranding,\n  customOverrides: defaultCustomOverrides,\n  mergedTheme: mergeThemes(defaultBranding, defaultCustomOverrides),\n});\n\n/**\n * ThemeProvider\n *\n * Provides theme configuration via React Context to all components in the tree.\n * It merges a branding theme (from UL) and optional customer overrides (CSS variables).\n *\n * @param theme - Optional branding and customerOverrides\n * @param children - The components that will have access to the theme\n *\n * @example\n * ```tsx\n * <ThemeProvider\n *   theme={{\n *     branding: { mode: 'dark', primaryColor: '#0070f3' },\n *     customerOverrides: { '--font-size': '14px' }\n *   }}\n * >\n *   <App />\n * </ThemeProvider>\n * ```\n */\nexport const ThemeProvider: React.FC<{\n  theme?: ThemeInput;\n  children: React.ReactNode;\n}> = ({ theme, children }) => {\n  const branding = React.useMemo(() => theme?.branding ?? defaultBranding, [theme?.branding]);\n  const customOverrides = React.useMemo(\n    () => theme?.customOverrides ?? defaultCustomOverrides,\n    [theme?.customOverrides],\n  );\n\n  const mergedTheme = React.useMemo(\n    () => mergeThemes(branding, customOverrides),\n    [branding, customOverrides],\n  );\n\n  return (\n    <ThemeContext.Provider value={{ branding, customOverrides, mergedTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n",
      "type": "registry:file",
      "target": "providers/theme-provider.tsx"
    },
    {
      "path": "src/providers/index.ts",
      "content": "export { Auth0ComponentProvider } from './component-provider';\n",
      "type": "registry:file",
      "target": "providers/index.ts"
    },
    {
      "path": "src/types/mfa-types.ts",
      "content": "import type {\n  EnrollMfaResponse,\n  AuthenticatorType,\n  OobChannel,\n} from '@auth0-web-ui-components/core';\n\n/**\n * Represents the type of an MFA authenticator.\n *\n * Common values include:\n * - 'sms' — Phone Message: Users receive a phone message with a verification code.\n * - 'push-notification' — Push Notification using Auth0 Guardian: Provides push notifications for authentication.\n * - 'otp' — One-time Password: Uses apps like Google Authenticator for OTP codes.\n * - 'email' — Email: Sends a verification code via email.\n * - 'duo' — Duo Security: Uses Duo Security for MFA.\n * - 'webauthn-roaming' — WebAuthn with FIDO Security Keys: Supports external security keys (e.g., FIDO2).\n * - 'webauthn-platform' — WebAuthn with FIDO Device Biometrics: Uses device biometrics compliant with WebAuthn.\n * - 'recovery-code' — Recovery Code: Uses unique recovery codes to regain access.\n *\n * This type can also be extended with custom string values for other authenticators.\n */\nexport type MFAType =\n  | 'sms'\n  | 'push-notification'\n  | 'totp'\n  | 'email'\n  | 'duo'\n  | 'webauthn-roaming'\n  | 'webauthn-platform'\n  | 'recovery-code';\n\n/**\n * Represents an MFA authenticator linked to a user.\n */\nexport interface MFAFactor {\n  id: string;\n  authenticator_type: AuthenticatorType;\n  oob_channels?: OobChannel[];\n  name?: string;\n  active: boolean;\n}\n\n/**\n * Error object for MFA operations.\n * Extends the standard Error with optional code and additional details.\n */\nexport interface MFAError {\n  message: string;\n  code?: string;\n}\n\nexport interface ManageMfaProps {\n  localization?: Partial<MFALocaleContent>;\n  hideHeader?: boolean;\n  showActiveOnly?: boolean;\n  disableEnroll?: boolean;\n  disableDelete?: boolean;\n  readOnly?: boolean;\n  factorConfig?: {\n    [key in MFAType]?: {\n      visible?: boolean;\n      enabled?: boolean;\n    };\n  };\n  onEnroll?: () => void;\n  onDelete?: () => void;\n  onFetch?: () => void;\n  onErrorAction?: (error: Error, action: 'enroll' | 'delete' | 'confirm') => void;\n  onBeforeAction?: (\n    action: 'enroll' | 'delete' | 'confirm',\n    factorType: MFAType,\n  ) => boolean | Promise<boolean>;\n}\n\nexport interface MFAFactorContent {\n  title: string;\n  description: string;\n}\n\nexport interface MFALocaleContent {\n  title: string;\n  description: string;\n  no_active_mfa: string;\n  sms?: MFAFactorContent;\n  'push-notification'?: MFAFactorContent;\n  totp?: MFAFactorContent;\n  email?: MFAFactorContent;\n  duo?: MFAFactorContent;\n  'webauthn-roaming'?: MFAFactorContent;\n  'webauthn-platform'?: MFAFactorContent;\n  'recovery-code'?: MFAFactorContent;\n}\n\n/**\n * A map of language codes (e.g., 'en', 'fr') to their respective localized content.\n */\nexport type MFALocalizationMap = Record<string, MFALocaleContent>;\n\n/**\n * Represents an MFA authenticator linked to a user.\n * @property {string} id - Unique identifier of the authenticator.\n * @property {string} authenticator_type - Type of the authenticator.\n * @property {string[]} [oob_channels] - Optional out-of-band channels supported.\n * @property {string} [name] - Optional name of the authenticator.\n * @property {boolean} active - Whether the authenticator is active.\n */\nexport interface Authenticator {\n  id: string;\n  authenticator_type: AuthenticatorType;\n  oob_channels?: OobChannel[];\n  name?: string;\n  active: boolean;\n  factorName?: string;\n}\n\n/**\n * Result returned by the `useMfaList` hook.\n * @property {boolean} loading - Indicates if the fetch request is in progress.\n * @property {Error | null} error - Error encountered during fetching, or null.\n * @property {Authenticator[]} factors - List of authenticators enriched with metadata.\n */\nexport interface UseMfaListResult {\n  loading: boolean;\n  error: Error | null;\n  factors: (Authenticator & { factorName: string })[];\n}\n\n/**\n * Result returned by the `useDeleteMfa` hook.\n * @property {boolean} loading - Indicates if the delete operation is in progress.\n * @property {Error} [error] - Error encountered during deletion, if any.\n * @property {boolean} success - Indicates if the deletion was successful.\n */\nexport interface DeleteMfaResult {\n  loading: boolean;\n  error?: Error;\n  success: boolean;\n}\n\n/**\n * Result object returned by the `useEnrollMfa` hook.\n *\n * @interface UseEnrollMfaResult\n * @property {boolean} loading - Indicates if the enrollment request is in progress.\n * @property {Error | null} error - Any error that occurred during the enrollment process.\n * @property {EnrollMfaResponse | null} response - The response from the MFA enrollment API.\n * @property {Function} enrollMfa - Function to trigger MFA enrollment with `factorName` and optional `options`.\n *    @returns {Promise<{ error: Error | null, response: EnrollMfaResponse | null }>} - Result of the enrollment request.\n */\nexport interface UseEnrollMfaResult {\n  loading: boolean;\n  error: Error | null;\n  response: EnrollMfaResponse | null;\n  enrollMfa: (\n    factorName: MFAType,\n    options?: { phone_number?: string; email?: string },\n  ) => Promise<{ error: Error | null; response: EnrollMfaResponse | null }>;\n}\n\n/**\n * Result object returned by the `useConfirmEnrollment` hook.\n *\n * @property {boolean} loading - True if the confirmation request is in progress.\n * @property {Error | null} error - Any error encountered during the confirmation process.\n * @property {unknown | null} response - The response from the confirmation API request.\n * @property {(factorName: string, options: { oobCode: string, userOtpCode?: string, userEmailOtpCode?: string }) => Promise<{ error: Error | null, response: unknown | null }>} confirmEnrollment - Function to trigger MFA enrollment confirmation with the required parameters.\n */\nexport interface ConfirmEnrollmentResult {\n  loading: boolean;\n  error: Error | null;\n  response: unknown | null;\n  confirmEnrollment: (\n    factorName: string,\n    options: {\n      oobCode?: string;\n      userOtpCode?: string;\n      userEmailOtpCode?: string;\n    },\n  ) => Promise<{ error: Error | null; response: unknown | null }>;\n}\n\n/**\n * Options used during MFA enrollment.\n * - `phone_number`: Required for SMS-based MFA.\n * - `email`: Required for email-based MFA.\n */\nexport type EnrollOptions = {\n  phone_number?: string;\n  email?: string;\n};\n\nexport interface ConfirmEnrollmentOptions {\n  oobCode?: string;\n  userOtpCode?: string;\n  userEmailOtpCode?: string;\n}\n\n/**\n * Result returned by the `useMFA` hook.\n * Provides methods to fetch, enroll, and delete MFA authenticators.\n */\nexport type UseMFAResult = {\n  /**\n   * Fetch the list of MFA authenticators.\n   * @param onlyActive - Whether to return only active authenticators.\n   * @returns A promise resolving to either an error or an array of authenticators.\n   */\n  fetchFactors: (onlyActive?: boolean) => Promise<{\n    error: Error | null;\n    response: Authenticator[] | null;\n  }>;\n\n  /**\n   * Enroll a new MFA factor (e.g., SMS, TOTP, Email).\n   * @param factorName - The type of MFA to enroll.\n   * @param options - Optional options like phone number or email.\n   * @returns A promise resolving to either an error or the enrollment response.\n   */\n  enrollMfa: (\n    factorName: MFAType,\n    options?: EnrollOptions,\n  ) => Promise<{\n    error: Error | null;\n    response: EnrollMfaResponse | null;\n  }>;\n\n  /**\n   * Delete an enrolled MFA authenticator by its ID.\n   * @param authenticatorId - The ID of the authenticator to delete.\n   * @returns A promise resolving to either an error or a success flag.\n   */\n  deleteMfa: (authenticatorId: string) => Promise<{ error: Error | null; success: boolean }>;\n\n  /**\n   * Confirm MFA enrollment with OOB code and user OTP code.\n   * @param factorName The MFA factor type.\n   * @param options The confirmation codes required to verify enrollment.\n   */\n  confirmEnrollment: (\n    factorName: MFAType,\n    options: ConfirmEnrollmentOptions,\n  ) => Promise<ConfirmEnrollmentResult>;\n};\n",
      "type": "registry:file",
      "target": "types/mfa-types.ts"
    },
    {
      "path": "src/types/index.ts",
      "content": "export * from './mfa-types';\n",
      "type": "registry:file",
      "target": "types/index.ts"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * mergeThemes\n *\n * Merges the branding theme with customer overrides.\n * Customer values take precedence if there's a collision.\n */\nexport function mergeThemes(\n  branding: Record<string, unknown>,\n  customer: Record<string, unknown>,\n): Record<string, unknown> {\n  return {\n    ...branding,\n    ...customer,\n  };\n}\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "src/styles/globals.css",
      "content": "@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
      "type": "registry:file",
      "target": "styles/globals.css"
    }
  ]
}