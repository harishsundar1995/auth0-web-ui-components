{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-mfa-management",
  "type": "registry:block",
  "title": "User Mfa Management",
  "description": "A block for managing Multi-Factor Authentication (MFA) factors, including enrollment and deletion.",
  "dependencies": [
    "@auth0-web-ui-components/core",
    "@auth0/auth0-react",
    "@hookform/resolvers",
    "@radix-ui/react-dialog",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "next-themes",
    "react",
    "react-hook-form",
    "react-qr-code",
    "sonner",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "card",
    "dialog",
    "form",
    "label",
    "separator",
    "sonner"
  ],
  "files": [
    {
      "path": "src/components/mfa/contact-input-form.tsx",
      "content": "import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { MailIcon, PhoneIcon } from 'lucide-react';\n\nimport {\n  MFAType,\n  FACTOR_TYPE_EMAIL,\n  createEmailContactSchema,\n  createSmsContactSchema,\n  type EmailContactForm,\n  type SmsContactForm,\n  type EnrollMfaResponse,\n} from '@auth0-web-ui-components/core';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from '@/components/ui/form';\nimport { TextField } from '@/components/ui/text-field';\nimport { useTranslator } from '@/hooks';\nimport { useContactEnrollment } from '@/hooks/mfa';\nimport { EMAIL_PLACEHOLDER, PHONE_NUMBER_PLACEHOLDER, ENROLL } from '@/lib/mfa-constants';\n\ntype ContactForm = EmailContactForm | SmsContactForm;\n\ntype ContactInputFormProps = {\n  factorType: MFAType;\n  enrollMfa: (factor: MFAType, options: Record<string, string>) => Promise<EnrollMfaResponse>;\n  onError: (error: Error, stage: typeof ENROLL) => void;\n  onContactSuccess: (oobCode?: string) => void;\n  onOtpSuccess: (otpData: {\n    secret: string | null;\n    barcodeUri: string | null;\n    recoveryCodes: string[];\n  }) => void;\n};\n\nexport function ContactInputForm({\n  factorType,\n  enrollMfa,\n  onError,\n  onContactSuccess,\n  onOtpSuccess,\n}: ContactInputFormProps) {\n  const { t } = useTranslator('mfa');\n\n  const { onSubmitContact, loading } = useContactEnrollment({\n    factorType,\n    enrollMfa,\n    onError,\n    onContactSuccess,\n    onOtpSuccess,\n  });\n\n  const ContactSchema = React.useMemo(() => {\n    return factorType === FACTOR_TYPE_EMAIL\n      ? createEmailContactSchema(t('errors.invalid_email'))\n      : createSmsContactSchema(t('errors.invalid_phone_number'));\n  }, [factorType, t]);\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(ContactSchema),\n    mode: 'onChange',\n  });\n\n  return (\n    <div className=\"w-full max-w-sm mx-auto text-center\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmitContact)} className=\"space-y-6\">\n          <FormField\n            control={form.control}\n            name=\"contact\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>\n                  {factorType === FACTOR_TYPE_EMAIL\n                    ? t('enrollment_form.email_address')\n                    : t('enrollment_form.phone_number')}\n                </FormLabel>\n                <FormControl>\n                  <TextField\n                    type={factorType === FACTOR_TYPE_EMAIL ? 'email' : 'tel'}\n                    startAdornment={\n                      <div className=\"p-1.5\">\n                        {factorType === FACTOR_TYPE_EMAIL ? <MailIcon /> : <PhoneIcon />}\n                      </div>\n                    }\n                    placeholder={\n                      factorType === FACTOR_TYPE_EMAIL\n                        ? EMAIL_PLACEHOLDER\n                        : PHONE_NUMBER_PLACEHOLDER\n                    }\n                    error={Boolean(form.formState.errors.contact)}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage className=\"text-left\" />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\" size=\"sm\" disabled={!form.formState.isValid || loading}>\n            {loading ? t('enrollment_form.sending') : t('enrollment_form.send_code')}\n          </Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/mfa/contact-input-form.tsx"
    },
    {
      "path": "src/components/mfa/otp-verification-form.tsx",
      "content": "import * as React from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from '@/components/ui/form';\nimport { OTPField } from '@/components/ui/otp-field';\nimport { useTranslator } from '@/hooks';\nimport { useOtpConfirmation } from '@/hooks/mfa';\nimport { type MFAType } from '@auth0-web-ui-components/core';\nimport { CONFIRM } from '@/lib/mfa-constants';\n\ntype OtpForm = {\n  userOtp: string;\n};\n\ntype OTPVerificationFormProps = {\n  factorType: MFAType;\n  confirmEnrollment: (\n    factor: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n  ) => Promise<unknown | null>;\n  onError: (error: Error, stage: typeof CONFIRM) => void;\n  onSuccess: () => void;\n  onClose: () => void;\n  oobCode?: string;\n};\n\nexport function OTPVerificationForm({\n  factorType,\n  confirmEnrollment,\n  onError,\n  onSuccess,\n  onClose,\n  oobCode,\n}: OTPVerificationFormProps) {\n  const { t } = useTranslator('mfa');\n\n  const { onSubmitOtp, loading } = useOtpConfirmation({\n    factorType,\n    confirmEnrollment,\n    onError,\n    onSuccess,\n    onClose,\n  });\n\n  const form = useForm<OtpForm>({\n    mode: 'onChange',\n  });\n\n  const handleSubmit = React.useCallback(\n    (data: OtpForm) => {\n      onSubmitOtp(data, oobCode);\n    },\n    [onSubmitOtp, oobCode],\n  );\n\n  return (\n    <div className=\"w-full max-w-sm mx-auto text-center\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} autoComplete=\"off\" className=\"space-y-6\">\n          <FormField\n            control={form.control}\n            name=\"userOtp\"\n            render={({ field }) => (\n              <FormItem className=\"text-center\">\n                <FormLabel className=\"block w-full text-sm font-medium text-center\">\n                  {t('enrollment_form.show_otp.enter_verify_code')}\n                </FormLabel>\n                <FormControl>\n                  <div className=\"flex justify-center\">\n                    <OTPField length={6} onChange={field.onChange} className=\"max-w-xs\" />\n                  </div>\n                </FormControl>\n                <FormMessage className=\"text-left\" />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\" size=\"sm\" disabled={loading}>\n            {loading\n              ? t('enrollment_form.show_otp.verifying')\n              : t('enrollment_form.show_otp.verify_code')}\n          </Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/mfa/otp-verification-form.tsx"
    },
    {
      "path": "src/components/mfa/qr-code-enrollment-form.tsx",
      "content": "import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport QRCode from 'react-qr-code';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from '@/components/ui/form';\nimport { OTPField } from '@/components/ui/otp-field';\nimport { useTranslator } from '@/hooks';\nimport { useOtpConfirmation } from '@/hooks/mfa';\nimport { type MFAType } from '@auth0-web-ui-components/core';\nimport { CONFIRM } from '@/lib/mfa-constants';\n\ntype OtpForm = {\n  userOtp: string;\n};\n\ntype QRCodeEnrollmentFormProps = {\n  factorType: MFAType;\n  barcodeUri: string;\n  recoveryCodes: string[];\n  confirmEnrollment: (\n    factor: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n  ) => Promise<unknown | null>;\n  onError: (error: Error, stage: typeof CONFIRM) => void;\n  onSuccess: () => void;\n  onClose: () => void;\n  oobCode?: string;\n};\n\nexport function QRCodeEnrollmentForm({\n  factorType,\n  barcodeUri,\n  recoveryCodes,\n  confirmEnrollment,\n  onError,\n  onSuccess,\n  onClose,\n  oobCode,\n}: QRCodeEnrollmentFormProps) {\n  const { t } = useTranslator('mfa');\n\n  const { onSubmitOtp, loading } = useOtpConfirmation({\n    factorType,\n    confirmEnrollment,\n    onError,\n    onSuccess,\n    onClose,\n  });\n\n  const form = useForm<OtpForm>({\n    mode: 'onChange',\n  });\n\n  const handleSubmit = React.useCallback(\n    (data: OtpForm) => {\n      onSubmitOtp(data, oobCode);\n    },\n    [onSubmitOtp, oobCode],\n  );\n\n  return (\n    <div className=\"text-center\">\n      <p>{t('enrollment_form.show_otp.title')}</p>\n      <div className=\"flex justify-center items-center mt-6\">\n        <div className=\"border border-gray-300 p-4 rounded-lg shadow-lg bg-white inline-block\">\n          <QRCode\n            size={150}\n            style={{ height: 'auto', maxWidth: '100%', width: '100%' }}\n            value={barcodeUri || ''}\n            viewBox={`0 0 150 150`}\n          />\n        </div>\n      </div>\n      <div className=\"mt-6\">\n        {recoveryCodes.length > 0 && (\n          <div className=\"mb-6\">\n            <p>\n              <strong>{t('enrollment_form.show_otp.save_recovery')}</strong>\n            </p>\n            <ul className=\"list-none inline-block bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mt-2\">\n              {recoveryCodes.map((code, index) => (\n                <li key={index} className=\"font-mono tracking-widest\">\n                  {code}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        <div className=\"w-full max-w-sm mx-auto text-center\">\n          <Form {...form}>\n            <form\n              autoComplete=\"off\"\n              onSubmit={form.handleSubmit(handleSubmit)}\n              className=\"space-y-6 mt-4\"\n            >\n              <FormField\n                control={form.control}\n                name=\"userOtp\"\n                render={({ field }) => (\n                  <FormItem className=\"text-center\">\n                    <FormLabel className=\"block w-full text-sm font-medium text-center\">\n                      {t('enrollment_form.show_otp.enter_code')}\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"flex justify-center\">\n                        <OTPField length={6} onChange={field.onChange} className=\"max-w-xs\" />\n                      </div>\n                    </FormControl>\n                    <FormMessage className=\"text-left\" />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" size=\"sm\" disabled={loading}>\n                {loading\n                  ? t('enrollment_form.show_otp.verifying')\n                  : t('enrollment_form.show_otp.verify_code')}\n              </Button>\n            </form>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/mfa/qr-code-enrollment-form.tsx"
    },
    {
      "path": "src/components/mfa/user-mfa-setup-form.tsx",
      "content": "import * as React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { ContactInputForm } from './contact-input-form';\nimport { QRCodeEnrollmentForm } from './qr-code-enrollment-form';\nimport { OTPVerificationForm } from './otp-verification-form';\nimport { SHOW_OTP, ENTER_OTP, ENTER_CONTACT, ENROLL, CONFIRM } from '@/lib/mfa-constants';\nimport {\n  FACTOR_TYPE_EMAIL,\n  FACTOR_TYPE_SMS,\n  FACTOR_TYPE_TOPT,\n  FACTOR_TYPE_PUSH_NOTIFICATION,\n} from '@auth0-web-ui-components/core';\nimport { type MFAType, type EnrollMfaResponse } from '@auth0-web-ui-components/core';\nimport { useTranslator } from '@/hooks';\nimport { useOtpEnrollment } from '@/hooks/mfa';\n\ntype UserMFASetupFormProps = {\n  open: boolean;\n  onClose: () => void;\n  factorType: MFAType;\n  enrollMfa: (factor: MFAType, options: Record<string, string>) => Promise<EnrollMfaResponse>;\n  confirmEnrollment: (\n    factor: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n  ) => Promise<unknown | null>;\n  onSuccess: () => void;\n  onError: (error: Error, stage: typeof ENROLL | typeof CONFIRM) => void;\n};\n\ntype EnrollmentPhase = typeof ENTER_CONTACT | typeof ENTER_OTP | typeof SHOW_OTP | null;\n\nexport function UserMFASetupForm({\n  open,\n  onClose,\n  factorType,\n  enrollMfa,\n  confirmEnrollment,\n  onSuccess,\n  onError,\n}: UserMFASetupFormProps) {\n  const { t } = useTranslator('mfa');\n\n  // Initialize phase as null, meaning no UI shown by default\n  const [phase, setPhase] = React.useState<EnrollmentPhase>(null);\n  const [oobCode, setOobCode] = React.useState<string | undefined>(undefined);\n\n  const otpEnrollment = useOtpEnrollment({\n    factorType,\n    enrollMfa,\n    onError,\n    onClose,\n  });\n\n  React.useEffect(() => {\n    if (!open) {\n      setPhase(null); // reset phase to null when dialog closes\n      setOobCode(undefined);\n      otpEnrollment.resetOtpData();\n    }\n  }, [open, otpEnrollment]);\n\n  React.useEffect(() => {\n    if (open && (factorType === FACTOR_TYPE_EMAIL || factorType === FACTOR_TYPE_SMS)) {\n      setPhase(ENTER_CONTACT);\n    }\n  }, [open, factorType]);\n\n  // Automatically initiate OTP enrollment when factorType is 'totp' or 'push-notification'\n  React.useEffect(() => {\n    if (\n      [FACTOR_TYPE_TOPT, FACTOR_TYPE_PUSH_NOTIFICATION].includes(factorType) &&\n      !otpEnrollment.otpData.secret &&\n      open\n    ) {\n      otpEnrollment.fetchOtpEnrollment().then(() => {\n        setPhase(SHOW_OTP);\n      });\n    }\n  }, [factorType, otpEnrollment, open]);\n\n  // Callback functions for form components\n  const handleContactSuccess = React.useCallback((oobCode?: string) => {\n    setOobCode(oobCode);\n    setPhase(ENTER_OTP);\n  }, []);\n\n  const handleOtpSuccess = React.useCallback(\n    (otpData: { secret: string | null; barcodeUri: string | null; recoveryCodes: string[] }) => {\n      otpEnrollment.resetOtpData();\n      // Use the proper setter function instead of direct mutation\n      otpEnrollment.updateOtpData(otpData);\n      setPhase(SHOW_OTP);\n    },\n    [otpEnrollment],\n  );\n\n  // Render the appropriate form based on the current phase and factorType\n  const renderForm = () => {\n    switch (phase) {\n      case ENTER_CONTACT:\n        return (\n          <ContactInputForm\n            factorType={factorType}\n            enrollMfa={enrollMfa}\n            onError={onError}\n            onContactSuccess={handleContactSuccess}\n            onOtpSuccess={handleOtpSuccess}\n          />\n        );\n      case SHOW_OTP:\n        return (\n          <QRCodeEnrollmentForm\n            factorType={factorType}\n            barcodeUri={otpEnrollment.otpData.barcodeUri || ''}\n            recoveryCodes={otpEnrollment.otpData.recoveryCodes}\n            confirmEnrollment={confirmEnrollment}\n            onError={onError}\n            onSuccess={onSuccess}\n            onClose={onClose}\n            oobCode={oobCode}\n          />\n        );\n      case ENTER_OTP:\n        return (\n          <OTPVerificationForm\n            factorType={factorType}\n            confirmEnrollment={confirmEnrollment}\n            onError={onError}\n            onSuccess={onSuccess}\n            onClose={onClose}\n            oobCode={oobCode}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={open && Boolean(phase)} onOpenChange={onClose}>\n      <DialogContent aria-describedby={factorType}>\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            {factorType === FACTOR_TYPE_EMAIL\n              ? t('enrollment_form.enroll_email')\n              : factorType === FACTOR_TYPE_SMS\n                ? t('enrollment_form.enroll_sms')\n                : t('enroll_otp_mfa')}\n          </DialogTitle>\n        </DialogHeader>\n        {renderForm()}\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/mfa/user-mfa-setup-form.tsx"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import { cva, type VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nconst badgeVariants = cva(\n  'theme-default:shadow-xs box-border inline-flex items-center overflow-clip rounded-2xl border border-transparent font-medium',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground theme-default:border-primary',\n        secondary: 'bg-muted text-muted-foreground theme-default:border-muted-foreground/25',\n        outline: 'border-border',\n        info: 'bg-info text-info-foreground theme-default:border-info-foreground/25',\n        success: 'bg-success theme-default:border-success-foreground/25 text-success-foreground',\n        warning: 'bg-warning theme-default:border-warning-foreground/25 text-warning-foreground',\n        destructive:\n          'bg-destructive theme-default:border-destructive-foreground/25 text-destructive-foreground',\n      },\n      size: {\n        sm: 'px-1.5 py-0.5 text-xs',\n        md: 'px-2 py-1 text-sm',\n        lg: 'px-2.5 py-1.5 text-sm',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Fragment : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": "components/ui/badge.tsx"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nconst buttonVariants = cva(\n  \"focus-visible:ring-ring aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive theme-default:active:scale-[0.99] relative box-border inline-flex shrink-0 items-center justify-center gap-2 overflow-hidden text-sm font-medium whitespace-nowrap transition-all duration-150 ease-in-out outline-none focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n  {\n    variants: {\n      variant: {\n        primary:\n          \"shadow-button-resting hover:shadow-button-hover hover:border-primary/50 border-primary bg-primary text-primary-foreground hover:bg-primary/90 theme-default:before:from-primary-foreground/0 theme-default:before:to-primary-foreground/15 theme-default:before:absolute theme-default:before:top-0 theme-default:before:left-0 theme-default:before:block theme-default:before:h-full theme-default:before:w-full theme-default:before:bg-gradient-to-t theme-default:before:content-[''] border\",\n        outline:\n          \"dark:bg-muted/50 hover:text-accent-foreground shadow-button-outlined-resting hover:shadow-button-outlined-hover hover:border-accent bg-background hover:bg-muted text-primary border-primary/35 theme-default:before:from-primary/5 theme-default:before:to-primary/0 theme-default:before:absolute theme-default:before:top-0 theme-default:before:left-0 theme-default:before:block theme-default:before:h-full theme-default:before:w-full theme-default:before:bg-gradient-to-t theme-default:before:content-[''] border\",\n        ghost: 'hover:bg-muted text-primary bg-transparent',\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-button-destructive-resting hover:shadow-button-destructive-hover border-destructive-border/25 hover:border-destructive-border/50 theme-default:before:to-primary-foreground/50 theme-default:before:absolute theme-default:before:top-0 theme-default:before:left-0 theme-default:before:block theme-default:before:h-full theme-default:before:w-full theme-default:before:bg-gradient-to-t theme-default:before:content-[''] theme-default:border\",\n        link: 'text-foreground underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 rounded-2xl px-4 py-2.5 has-[>svg]:px-3',\n        xs: 'h-7 rounded-md px-2 py-1.5 text-xs has-[>svg]:px-2',\n        sm: 'h-8 gap-1.5 rounded-xl px-3 py-2 text-xs has-[>svg]:px-2.5',\n        lg: 'h-12 rounded-3xl px-6 py-3 text-base has-[>svg]:px-4',\n        icon: 'size-7 rounded-xl',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'default',\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  as?: boolean;\n}\n\nfunction Button({\n  className,\n  variant,\n  size,\n  as,\n  ...props\n}: React.ComponentProps<'button'> & ButtonProps) {\n  const Comp = as ? React.Fragment : 'button';\n\n  return <Comp className={cn('button', buttonVariants({ variant, size }), className)} {...props} />;\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": "components/ui/button.tsx"
    },
    {
      "path": "src/components/ui/card.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground shadow-bevel-2xl flex flex-col gap-6 rounded-4xl py-6',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn('col-start-2 row-span-2 row-start-1 self-start justify-self-end', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-content\" className={cn('px-6', className)} {...props} />;\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent };\n",
      "type": "registry:ui",
      "target": "components/ui/card.tsx"
    },
    {
      "path": "src/components/ui/dialog.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { XIcon } from 'lucide-react';\nimport * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nfunction Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  const { children, asChild = false, ...elementProps } = props;\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...(typeof children.props === 'object' ? children.props : {}),\n      ...elementProps,\n    });\n  }\n\n  return (\n    <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" asChild {...props}>\n      <Button {...elementProps} data-slot=\"dialog-trigger\">\n        {children}\n      </Button>\n    </DialogPrimitive.Trigger>\n  );\n}\n\nfunction DialogPortal({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  const { children } = props;\n\n  return (\n    <DialogPrimitive.Close data-slot=\"dialog-close\" asChild>\n      <Button variant=\"outline\" data-slot=\"dialog-close\">\n        {children}\n      </Button>\n    </DialogPrimitive.Close>\n  );\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50 duration-200 ease-in-out',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean;\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 shadow-bevel-2xl rounded-5xl fixed top-[50%] left-[50%] z-[999] grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 p-6 duration-200 ease-in-out sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            asChild\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background absolute top-4 right-4\"\n          >\n            <Button variant=\"ghost\" size=\"icon\">\n              <XIcon />\n              <span className=\"sr-only\">Close</span>\n            </Button>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn('flex flex-col-reverse gap-2 sm:flex-row sm:justify-end', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogTitle({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/dialog.tsx"
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nexport function Label({ children, className, ...props }: React.ComponentPropsWithoutRef<'label'>) {\n  return (\n    <label\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </label>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/label.tsx"
    },
    {
      "path": "src/components/ui/otp-field.tsx",
      "content": "'use client';\n\nimport { TextField } from '@/components/ui/text-field';\nimport React, { ClipboardEvent, KeyboardEvent, useRef, useState } from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nexport interface OTPFieldProps {\n  length?: number;\n  className?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n  autoSubmit?: (value: string) => void;\n  separator?: {\n    character?: string;\n    afterEvery?: number;\n  };\n}\n\nfunction OTPField({\n  length = 6,\n  placeholder,\n  disabled,\n  className,\n  onChange,\n  autoSubmit,\n  separator,\n}: OTPFieldProps) {\n  const [otp, setOtp] = useState<string[]>(new Array(length).fill(''));\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n\n  const handleChange = (element: HTMLInputElement, index: number) => {\n    const value = element.value;\n    if (isNaN(Number(value))) return;\n\n    const newOtp = [...otp];\n    newOtp[index] = value.substring(value.length - 1);\n    setOtp(newOtp);\n\n    const otpValue = newOtp.join('');\n    onChange?.(otpValue);\n\n    if (otpValue.length === length && autoSubmit) {\n      autoSubmit(otpValue);\n    }\n\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1]?.focus();\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>, index: number) => {\n    if ((e.key === 'Delete' || e.key === 'Backspace') && (e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      const newOtp = new Array(length).fill('');\n      setOtp(newOtp);\n      onChange?.('');\n      inputRefs.current[0]?.focus();\n      return;\n    }\n\n    if (e.key === 'ArrowLeft') {\n      e.preventDefault();\n      if (index > 0) {\n        inputRefs.current[index - 1]?.focus();\n      }\n      return;\n    }\n\n    if (e.key === 'ArrowRight') {\n      e.preventDefault();\n      if (index < length - 1) {\n        inputRefs.current[index + 1]?.focus();\n      }\n      return;\n    }\n\n    if (e.key === 'Home') {\n      e.preventDefault();\n      inputRefs.current[0]?.focus();\n      return;\n    }\n\n    if (e.key === 'End') {\n      e.preventDefault();\n      inputRefs.current[length - 1]?.focus();\n      return;\n    }\n\n    if (e.key === 'Backspace') {\n      if (!otp[index] && index > 0) {\n        const newOtp = [...otp];\n        newOtp[index - 1] = '';\n        setOtp(newOtp);\n        onChange?.(newOtp.join(''));\n        inputRefs.current[index - 1]?.focus();\n      }\n      return;\n    }\n\n    if (e.key === 'Delete') {\n      if (otp[index]) {\n        const newOtp = [...otp];\n        newOtp[index] = '';\n        setOtp(newOtp);\n        onChange?.(newOtp.join(''));\n      } else if (index < length - 1) {\n        const newOtp = [...otp];\n        newOtp[index + 1] = '';\n        setOtp(newOtp);\n        onChange?.(newOtp.join(''));\n      }\n      return;\n    }\n\n    if (e.key === ' ') {\n      e.preventDefault();\n      const nextEmptyIndex = otp.findIndex((digit, i) => i > index && !digit);\n      if (nextEmptyIndex !== -1) {\n        inputRefs.current[nextEmptyIndex]?.focus();\n      } else if (index < length - 1) {\n        inputRefs.current[index + 1]?.focus();\n      }\n      return;\n    }\n  };\n\n  const handlePaste = (e: ClipboardEvent<HTMLInputElement>, startIndex: number) => {\n    e.preventDefault();\n    const pasteData = e.clipboardData.getData('text').replace(/[^0-9]/g, '');\n\n    if (!pasteData) return;\n\n    const newOtp = [...otp];\n    const availableSlots = length - startIndex;\n    const digitsToPaste = pasteData.slice(0, availableSlots);\n\n    for (let i = startIndex; i < Math.min(startIndex + digitsToPaste.length, length); i++) {\n      newOtp[i] = '';\n    }\n\n    for (let i = 0; i < digitsToPaste.length && startIndex + i < length; i++) {\n      newOtp[startIndex + i] = digitsToPaste[i];\n    }\n\n    setOtp(newOtp);\n    const otpValue = newOtp.join('');\n    onChange?.(otpValue);\n\n    if (otpValue.length === length && autoSubmit) {\n      autoSubmit(otpValue);\n    }\n\n    const nextFocusIndex = Math.min(startIndex + digitsToPaste.length, length - 1);\n    setTimeout(() => {\n      inputRefs.current[nextFocusIndex]?.focus();\n    }, 0);\n  };\n\n  return (\n    <div className={cn('flex w-full items-center gap-2', className)}>\n      {otp.map((digit, index) => (\n        <React.Fragment key={index}>\n          <TextField\n            ref={(el) => {\n              inputRefs.current[index] = el as HTMLInputElement;\n            }}\n            type=\"text\"\n            inputMode=\"numeric\"\n            maxLength={1}\n            value={digit}\n            placeholder={placeholder}\n            disabled={disabled}\n            className=\"flex-1 text-xl font-semibold *:text-center has-[input]:text-center\"\n            onChange={(e) => handleChange(e.target, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            onPaste={(e) => handlePaste(e, index)}\n          />\n          {separator?.afterEvery &&\n            (index + 1) % separator.afterEvery === 0 &&\n            index < length - 1 && (\n              <span className=\"text-muted-foreground text-2xl font-semibold\">\n                {separator.character || '-'}\n              </span>\n            )}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n\nexport { OTPField };\n",
      "type": "registry:ui",
      "target": "components/ui/otp-field.tsx"
    },
    {
      "path": "src/components/ui/separator.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<'hr'> & { orientation?: 'horizontal' | 'vertical'; decorative?: boolean }) {\n  return (\n    <div\n      data-slot=\"separator\"\n      data-orientation={orientation}\n      role={decorative ? 'none' : 'separator'}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Separator };\n",
      "type": "registry:ui",
      "target": "components/ui/separator.tsx"
    },
    {
      "path": "src/components/ui/sonner.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { useTheme } from 'next-themes';\nimport { Toaster as Sonner, ToasterProps } from 'sonner';\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  );\n};\n\nexport { Toaster };\n",
      "type": "registry:ui",
      "target": "components/ui/sonner.tsx"
    },
    {
      "path": "src/components/ui/spinner.tsx",
      "content": "import { cva, VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nconst spinnerVariants = cva(\n  'text-surface inline-block h-8 w-8 rounded-full duration-[5000] ease-linear',\n  {\n    variants: {\n      variant: {\n        dots: 'border-primary animate-[spin_5s_linear_infinite] border-6 border-dotted',\n        pulse: 'bg-primary animate-pulse',\n        solid: 'border-primary animate-spin border-2 border-e-transparent',\n      },\n      size: {\n        sm: 'size-4',\n        md: 'size-8',\n        lg: 'size-12',\n      },\n    },\n    defaultVariants: {\n      variant: 'solid',\n      size: 'md',\n    },\n  },\n);\n\nexport interface SpinnerProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof spinnerVariants> {}\n\nexport function Spinner({ variant, size, className, ...props }: SpinnerProps) {\n  return (\n    <div className={cn(spinnerVariants({ variant, size }), className)} {...props}>\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/spinner.tsx"
    },
    {
      "path": "src/components/ui/text-field.tsx",
      "content": "import { cva, VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\nimport { cn } from '@/lib/theme-utils';\n\nconst textFieldVariants = cva(\n  \"bg-input aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive theme-default:active:scale-[0.99] relative box-border inline-flex w-full shrink-0 cursor-text items-center justify-center gap-2 overflow-hidden rounded-2xl text-sm transition-[color,box-shadow] duration-150 ease-in-out outline-none disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n  {\n    variants: {\n      variant: {\n        default:\n          'border-border/50 text-input-foreground shadow-input-resting hover:shadow-input-hover hover:border-primary/25 focus-within:border-border focus-within:ring-primary/15 focus-within:ring-4',\n        error:\n          'border-destructive-border/50 text-destructive-foreground shadow-input-destructive-resting hover:shadow-input-destructive-hover hover:border-destructive-border/25 focus-within:ring-destructive-border/15 focus-within:ring-4',\n      },\n      size: {\n        default: 'h-10',\n        sm: 'h-9',\n        lg: 'h-11',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nexport interface TextFieldProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  error?: boolean;\n  helperText?: string;\n  size?: VariantProps<typeof textFieldVariants>['size'];\n  variant?: VariantProps<typeof textFieldVariants>['variant'];\n  startAdornment?: React.ReactNode;\n  endAdornment?: React.ReactNode;\n}\n\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  (\n    { className, variant, size, error, helperText, startAdornment, endAdornment, ...props },\n    ref,\n  ) => {\n    const isDisabled = props.disabled;\n\n    const WrapperComponent = props.id ? 'div' : 'label';\n\n    return (\n      <div className=\"flex w-full flex-col\">\n        <WrapperComponent\n          className={cn(\n            textFieldVariants({ variant: error ? 'error' : variant, size }),\n            'group items-center gap-0.5',\n            isDisabled &&\n              'bg-input-muted text-input-muted-foreground cursor-not-allowed opacity-50',\n            isDisabled && variant === 'default' && 'bg-input-muted',\n            startAdornment && 'pl-[5px]',\n            endAdornment && 'pr-[5px]',\n            className,\n          )}\n        >\n          {startAdornment && (\n            <div className=\"[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n              {startAdornment}\n            </div>\n          )}\n          <input\n            className={cn(\n              'w-full flex-1 bg-transparent px-3 py-2 outline-none file:border-0 file:bg-transparent file:text-sm file:font-medium',\n              isDisabled &&\n                'bg-input-muted text-input-muted-foreground cursor-not-allowed opacity-50',\n              startAdornment && 'pl-0',\n              endAdornment && 'pr-0',\n              size === 'default' && 'h-10',\n              size === 'sm' && 'h-9',\n              size === 'lg' && 'h-11',\n            )}\n            ref={ref}\n            {...props}\n          />\n          {endAdornment && (\n            <div className=\"[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n              {endAdornment}\n            </div>\n          )}\n        </WrapperComponent>\n        {helperText && (\n          <p\n            className={cn(\n              'mt-1.5 px-2 text-xs',\n              error ? 'text-destructive-foreground' : 'text-muted-foreground',\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  },\n);\n\nTextField.displayName = 'TextField';\n\nexport { TextField, textFieldVariants };\n",
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx"
    },
    {
      "path": "src/hoc/index.ts",
      "content": "export { withCoreClient } from './with-core-client';\n",
      "type": "registry:file",
      "target": "hoc/index.ts"
    },
    {
      "path": "src/hooks/index.ts",
      "content": "export { useComponentConfig, Auth0ComponentConfigContext } from './use-config';\nexport { useCoreClient, CoreClientContext } from './use-core-client';\nexport { useTranslator } from './use-translator';\nexport { useContactEnrollment, useOtpConfirmation, useOtpEnrollment, useMFA } from './mfa';\nexport { useTheme } from './use-theme';\nexport { useCoreClientInitialization } from './use-core-client-initialization';\n",
      "type": "registry:hook",
      "target": "hooks/index.ts"
    },
    {
      "path": "src/hooks/mfa/index.ts",
      "content": "export { useContactEnrollment } from './use-contact-enrollment';\nexport { useOtpConfirmation } from './use-otp-confirmation';\nexport { useOtpEnrollment } from './use-otp-enrollment';\nexport { useMFA } from './use-mfa';\n",
      "type": "registry:hook",
      "target": "hooks/mfa/index.ts"
    },
    {
      "path": "src/hooks/mfa/use-contact-enrollment.ts",
      "content": "import { useState, useCallback } from 'react';\nimport {\n  FACTOR_TYPE_EMAIL,\n  FACTOR_TYPE_SMS,\n  FACTOR_TYPE_OTP,\n  normalizeError,\n  type MFAType,\n  type EnrollMfaResponse,\n} from '@auth0-web-ui-components/core';\nimport { ENROLL } from '@/lib/mfa-constants';\nimport { useTranslator } from '@/hooks';\n\ntype ContactForm = {\n  contact: string;\n};\n\ntype UseContactEnrollmentProps = {\n  factorType: MFAType;\n  enrollMfa: (factor: MFAType, options: Record<string, string>) => Promise<EnrollMfaResponse>;\n  onError: (error: Error, stage: typeof ENROLL) => void;\n  onContactSuccess: (oobCode?: string) => void;\n  onOtpSuccess: (otpData: {\n    secret: string | null;\n    barcodeUri: string | null;\n    recoveryCodes: string[];\n  }) => void;\n};\n\nexport function useContactEnrollment({\n  factorType,\n  enrollMfa,\n  onError,\n  onContactSuccess,\n  onOtpSuccess,\n}: UseContactEnrollmentProps) {\n  const { t } = useTranslator('mfa');\n  const [loading, setLoading] = useState(false);\n\n  const onSubmitContact = useCallback(\n    async (data: ContactForm) => {\n      setLoading(true);\n      try {\n        const options: Record<string, string> =\n          factorType === FACTOR_TYPE_EMAIL\n            ? { email: data.contact }\n            : factorType === FACTOR_TYPE_SMS\n              ? { phone_number: data.contact }\n              : {};\n\n        const response = await enrollMfa(factorType, options);\n\n        if (response?.oob_code) {\n          onContactSuccess(response.oob_code);\n        }\n\n        if (response?.authenticator_type === FACTOR_TYPE_OTP) {\n          onOtpSuccess({\n            secret: response.secret ?? null,\n            barcodeUri: response.barcode_uri ?? null,\n            recoveryCodes: response.recovery_codes || [],\n          });\n        }\n      } catch (error) {\n        const normalizedError = normalizeError(error, {\n          resolver: (code) => t(`errors.${code}.${factorType}`),\n          fallbackMessage: 'An unexpected error occurred during MFA enrollment.',\n        });\n        onError(normalizedError, ENROLL);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [factorType, enrollMfa, onContactSuccess, onOtpSuccess, onError, t],\n  );\n\n  return { onSubmitContact, loading };\n}\n",
      "type": "registry:hook",
      "target": "hooks/mfa/use-contact-enrollment.ts"
    },
    {
      "path": "src/hooks/mfa/use-mfa.ts",
      "content": "import { useCallback } from 'react';\nimport { useCoreClient } from '../use-core-client';\nimport type {\n  MFAType,\n  EnrollOptions,\n  ConfirmEnrollmentOptions,\n} from '@auth0-web-ui-components/core';\nimport { UseMFAResult } from '@/types';\n\n/**\n * A custom React hook for managing all Multi-Factor Authentication (MFA) operations.\n * @returns {UseMfaResult} An object containing the functions to manage MFA factors.\n */\nexport function useMFA(): UseMFAResult {\n  const { coreClient } = useCoreClient();\n\n  if (!coreClient) {\n    throw new Error(\n      'useMFA must be used within Auth0ComponentProvider with initialized CoreClient',\n    );\n  }\n\n  const fetchFactors = useCallback(\n    (onlyActive = false) => coreClient.authenticationApiService.mfa.fetchFactors(onlyActive),\n    [coreClient],\n  );\n\n  const enrollMfa = useCallback(\n    (factorName: MFAType, options: EnrollOptions = {}) =>\n      coreClient.authenticationApiService.mfa.enrollFactor(factorName, options),\n    [coreClient],\n  );\n\n  const deleteMfa = useCallback(\n    (authenticatorId: string) =>\n      coreClient.authenticationApiService.mfa.deleteFactor(authenticatorId),\n    [coreClient],\n  );\n\n  const confirmEnrollment = useCallback(\n    (factorName: MFAType, options: ConfirmEnrollmentOptions) =>\n      coreClient.authenticationApiService.mfa.confirmEnrollment(factorName, options),\n    [coreClient],\n  );\n\n  return {\n    fetchFactors,\n    enrollMfa,\n    deleteMfa,\n    confirmEnrollment,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/mfa/use-mfa.ts"
    },
    {
      "path": "src/hooks/mfa/use-otp-confirmation.ts",
      "content": "import { useState, useCallback } from 'react';\nimport { FACTOR_TYPE_EMAIL, normalizeError, type MFAType } from '@auth0-web-ui-components/core';\nimport { CONFIRM } from '@/lib/mfa-constants';\nimport { useTranslator } from '@/hooks';\n\ntype OtpForm = {\n  userOtp: string;\n};\n\ntype UseOtpConfirmationProps = {\n  factorType: MFAType;\n  confirmEnrollment: (\n    factor: MFAType,\n    options: { oobCode?: string; userOtpCode?: string; userEmailOtpCode?: string },\n  ) => Promise<unknown | null>;\n  onError: (error: Error, stage: typeof CONFIRM) => void;\n  onSuccess: () => void;\n  onClose: () => void;\n};\n\nexport function useOtpConfirmation({\n  factorType,\n  confirmEnrollment,\n  onError,\n  onSuccess,\n  onClose,\n}: UseOtpConfirmationProps) {\n  const { t } = useTranslator('mfa');\n  const [loading, setLoading] = useState(false);\n\n  const onSubmitOtp = useCallback(\n    async (data: OtpForm, oobCode?: string) => {\n      setLoading(true);\n\n      try {\n        const options = {\n          oobCode,\n          ...(factorType === FACTOR_TYPE_EMAIL\n            ? { userEmailOtpCode: data.userOtp }\n            : { userOtpCode: data.userOtp }),\n        };\n\n        const response = await confirmEnrollment(factorType, options);\n        if (response) {\n          onSuccess();\n          onClose();\n        }\n      } catch (err) {\n        const normalizedError = normalizeError(err, {\n          resolver: (code) => t(`errors.${code}.${factorType}`),\n          fallbackMessage: 'An unexpected error occurred during MFA enrollment.',\n        });\n        onError(normalizedError, CONFIRM);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [factorType, confirmEnrollment, onError, onSuccess, onClose, t],\n  );\n\n  return { onSubmitOtp, loading };\n}\n",
      "type": "registry:hook",
      "target": "hooks/mfa/use-otp-confirmation.ts"
    },
    {
      "path": "src/hooks/mfa/use-otp-enrollment.ts",
      "content": "import { useState, useCallback } from 'react';\nimport {\n  FACTOR_TYPE_OTP,\n  normalizeError,\n  type MFAType,\n  type EnrollMfaResponse,\n} from '@auth0-web-ui-components/core';\nimport { ENROLL } from '@/lib/mfa-constants';\nimport { useTranslator } from '@/hooks';\n\ntype UseOtpEnrollmentProps = {\n  factorType: MFAType;\n  enrollMfa: (factor: MFAType, options: Record<string, string>) => Promise<EnrollMfaResponse>;\n  onError: (error: Error, stage: typeof ENROLL) => void;\n  onClose: () => void;\n};\n\nexport function useOtpEnrollment({\n  factorType,\n  enrollMfa,\n  onError,\n  onClose,\n}: UseOtpEnrollmentProps) {\n  const { t } = useTranslator('mfa');\n  const [loading, setLoading] = useState(false);\n  const [otpData, setOtpData] = useState<{\n    secret: string | null;\n    barcodeUri: string | null;\n    recoveryCodes: string[];\n  }>({\n    secret: null,\n    barcodeUri: null,\n    recoveryCodes: [],\n  });\n\n  const fetchOtpEnrollment = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await enrollMfa(factorType, {});\n      if (response?.authenticator_type === FACTOR_TYPE_OTP) {\n        setOtpData({\n          secret: response.secret ?? null,\n          barcodeUri: response.barcode_uri ?? null,\n          recoveryCodes: response.recovery_codes || [],\n        });\n      }\n    } catch (error) {\n      const normalizedError = normalizeError(error, {\n        resolver: (code) => t(`errors.${code}.${factorType}`),\n        fallbackMessage: 'An unexpected error occurred during MFA enrollment.',\n      });\n      onError(normalizedError, ENROLL);\n      onClose();\n    } finally {\n      setLoading(false);\n    }\n  }, [factorType, enrollMfa, onError, onClose, t]);\n\n  const resetOtpData = useCallback(() => {\n    setOtpData({ secret: null, barcodeUri: null, recoveryCodes: [] });\n    setLoading(false);\n  }, []);\n\n  const updateOtpData = useCallback(\n    (newData: { secret: string | null; barcodeUri: string | null; recoveryCodes: string[] }) => {\n      setOtpData(newData);\n    },\n    [],\n  );\n\n  return {\n    fetchOtpEnrollment,\n    otpData,\n    resetOtpData,\n    updateOtpData,\n    loading,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/mfa/use-otp-enrollment.ts"
    },
    {
      "path": "src/hooks/use-config.ts",
      "content": "import * as React from 'react';\nimport type { Auth0ComponentConfig } from '@/types/auth-types';\n\nexport const Auth0ComponentConfigContext = React.createContext<{\n  config: Auth0ComponentConfig;\n}>({\n  config: {\n    themeSettings: { mode: 'light' },\n    customOverrides: {},\n    loader: undefined,\n  },\n});\n\n/**\n * Hook to access the Auth0 component configuration from context.\n */\nexport function useComponentConfig(): { config: Auth0ComponentConfig } {\n  const context = React.useContext(Auth0ComponentConfigContext);\n\n  if (!context) {\n    throw new Error('useComponentConfig must be used within an Auth0ComponentProvider');\n  }\n\n  return context;\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-config.ts"
    },
    {
      "path": "src/hooks/use-core-client-initialization.ts",
      "content": "import * as React from 'react';\nimport type {\n  CoreClientInterface,\n  AuthDetailsCore,\n  I18nInitOptions,\n} from '@auth0-web-ui-components/core';\nimport { createCoreClient } from '@auth0-web-ui-components/core';\n\ninterface UseCoreClientInitializationProps {\n  authDetails: AuthDetailsCore;\n  i18nOptions?: I18nInitOptions;\n}\n\n/**\n * Custom hook to handle CoreClient initialization\n */\nexport const useCoreClientInitialization = ({\n  authDetails,\n  i18nOptions,\n}: UseCoreClientInitializationProps) => {\n  const [coreClient, setCoreClient] = React.useState<CoreClientInterface | null>(null);\n\n  React.useEffect(() => {\n    const initializeCoreClient = async () => {\n      try {\n        const initializedCoreClient = await createCoreClient(authDetails, i18nOptions);\n\n        setCoreClient(initializedCoreClient);\n      } catch (error) {\n        console.error('Failed to initialize CoreClient:', error);\n        setCoreClient(null);\n      }\n    };\n\n    initializeCoreClient();\n  }, [\n    authDetails.contextInterface?.getAccessTokenSilently,\n    i18nOptions?.currentLanguage,\n    i18nOptions?.fallbackLanguage,\n  ]);\n\n  return coreClient;\n};\n",
      "type": "registry:hook",
      "target": "hooks/use-core-client-initialization.ts"
    },
    {
      "path": "src/hooks/use-core-client.ts",
      "content": "import * as React from 'react';\nimport type { CoreClientInterface } from '@auth0-web-ui-components/core';\n\nconst CoreClientContext = React.createContext<{\n  coreClient: CoreClientInterface | null;\n}>({\n  coreClient: null,\n});\n\n/**\n * Hook to access the CoreClient instance from context.\n *\n * Provides access to the initialized CoreClient which handles API calls and business logic.\n *\n * @returns {{ coreClient: CoreClientInterface | null }} The current CoreClient instance or null if not initialized.\n *\n * @throws {Error} Throws if used outside of an Auth0ComponentProvider.\n */\nexport const useCoreClient = () => {\n  const context = React.useContext(CoreClientContext);\n  if (!context) {\n    throw new Error('useCoreClient must be used within Auth0ComponentProvider');\n  }\n  return context;\n};\n\nexport { CoreClientContext };\n",
      "type": "registry:hook",
      "target": "hooks/use-core-client.ts"
    },
    {
      "path": "src/hooks/use-theme.ts",
      "content": "'use client';\n\nimport { useContext } from 'react';\nimport { ThemeContext } from '@/providers/theme-provider';\n\n/**\n * useTheme\n *\n * Access the current theme from context. Includes:\n * - branding (UL theme)\n * - customerOverrides (CSS variables)\n * - mergedTheme (computed result)\n */\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-theme.ts"
    },
    {
      "path": "src/hooks/use-translator.ts",
      "content": "import { useMemo, useCallback } from 'react';\nimport { type TranslationFunction } from '@auth0-web-ui-components/core';\nimport { useCoreClient } from './use-core-client';\n\n/**\n * Custom hook for accessing the i18n service from CoreClient.\n *\n * This hook provides access to the i18n service from the CoreClient context,\n * including translation functions and language change capabilities.\n *\n * @param namespace - The translation namespace (e.g., 'mfa', 'common')\n * @param overrides - Optional translation overrides for the namespace\n * @returns An object containing the translator function and changeLanguage function\n *\n * @example\n * ```tsx\n * // Basic usage with namespace only\n * const { t, changeLanguage } = useTranslator('common');\n *\n * // Usage with overrides\n * const { t } = useTranslator('mfa', {\n *   title: 'Custom Title',\n *   'sms.title': 'Text Message'\n * });\n *\n * // Using the translator\n * const title = t('title');\n * const message = t('welcome', { name: 'John' });\n *\n * // Changing language\n * await changeLanguage('es-ES');\n * ```\n */\nexport function useTranslator(\n  namespace: string,\n  overrides?: Record<string, unknown>,\n): {\n  t: TranslationFunction;\n  changeLanguage: (language: string, fallbackLanguage?: string) => Promise<void>;\n  currentLanguage: string;\n  fallbackLanguage: string | undefined;\n} {\n  const { coreClient } = useCoreClient();\n\n  if (!coreClient) {\n    throw new Error(\n      'useTranslator must be used within Auth0ComponentProvider with initialized CoreClient',\n    );\n  }\n\n  const translator = useMemo(() => {\n    return coreClient.i18nService.translator(namespace, overrides);\n  }, [coreClient, namespace, overrides]);\n\n  const changeLanguage = useCallback(\n    async (language: string, fallbackLanguage?: string) => {\n      await coreClient.i18nService.changeLanguage(language, fallbackLanguage);\n    },\n    [coreClient],\n  );\n\n  return {\n    t: translator,\n    changeLanguage,\n    currentLanguage: coreClient.i18nService.currentLanguage,\n    fallbackLanguage: coreClient.i18nService.fallbackLanguage,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-translator.ts"
    },
    {
      "path": "src/lib/mfa-constants.ts",
      "content": "export const ENTER_OTP = 'enterOtp';\nexport const SHOW_OTP = 'showOtp';\nexport const ENTER_CONTACT = 'enterContact';\n\nexport const ENROLL = 'enroll';\nexport const CONFIRM = 'confirm';\nexport const EMAIL_PLACEHOLDER = 'your@email.com';\nexport const PHONE_NUMBER_PLACEHOLDER = '+1234567890';\n",
      "type": "registry:file",
      "target": "lib/mfa-constants.ts"
    },
    {
      "path": "src/lib/theme-utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * mergeThemes\n *\n * Merges the branding theme with customer overrides.\n * Customer values take precedence if there's a collision.\n */\nexport function mergeThemes(\n  branding: Record<string, unknown>,\n  customer: Record<string, unknown>,\n): Record<string, unknown> {\n  return {\n    ...branding,\n    ...customer,\n  };\n}\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:file",
      "target": "lib/theme-utils.ts"
    },
    {
      "path": "src/providers/component-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport type { Auth0ComponentProviderProps } from '@/types/auth-types';\nimport { Spinner } from '@/components/ui/spinner';\nimport { Auth0ComponentConfigContext } from '@/hooks';\nimport { ThemeProvider } from './theme-provider';\nimport { ProxyProvider } from './proxy-provider';\nconst SpaProvider = React.lazy(() => import('./spa-provider'));\n\n/**\n * Auth0ComponentProvider\n *\n * The main Auth0 context provider component that conditionally\n * renders either the Proxy Mode or SPA Mode provider based on the presence\n * of `authProxyUrl`.\n *\n * - **Proxy Mode:** Used when authentication is handled externally via a proxy server.\n * - **SPA Mode:** Used when authentication is handled client-side using the Auth0 SPA SDK.\n *\n * This component abstracts the complexity of choosing the correct mode from the end user.\n *\n * @param {Object} props - Configuration props.\n * @param {React.ReactNode} props.children - Child components that require authentication context.\n * @param {Object} [props.i18n] - Internationalization configuration (language, fallback).\n * @param {Object} [props.themeSettings] - Theme and branding settings.\n * @param {Object} [props.customOverrides] - Optional CSS variable overrides for styling.\n * @param {React.ReactNode} [props.loader] - Custom loading component to show while\n *                                                    authentication is initializing.\n *                                                    Defaults to \"Loading authentication...\".\n *\n * @returns {JSX.Element} The provider component for Auth0 context.\n *\n * @example\n * ```tsx\n * <Auth0ComponentProvider\n *   authProxyUrl=\"/api/auth\"\n *   i18n={{ currentLanguage: 'en', fallbackLanguage: 'en' }}\n *   themeSettings={{ mode: 'dark' }}\n * >\n *   <App />\n * </Auth0ComponentProvider>\n * ```\n */\nexport const Auth0ComponentProvider = ({\n  i18n,\n  authDetails,\n  themeSettings = { mode: 'light' },\n  customOverrides = {},\n  loader,\n  children,\n}: Auth0ComponentProviderProps & { children: React.ReactNode }) => {\n  const config = React.useMemo(\n    () => ({\n      themeSettings,\n      customOverrides,\n      loader,\n    }),\n    [themeSettings, customOverrides, loader],\n  );\n\n  return (\n    <Auth0ComponentConfigContext.Provider value={{ config }}>\n      <ThemeProvider theme={{ branding: themeSettings, customOverrides }}>\n        <React.Suspense fallback={loader || <Spinner />}>\n          {authDetails?.authProxyUrl ? (\n            <ProxyProvider i18n={i18n} authDetails={authDetails}>\n              {children}\n            </ProxyProvider>\n          ) : (\n            <SpaProvider i18n={i18n} authDetails={authDetails}>\n              {children}\n            </SpaProvider>\n          )}\n        </React.Suspense>\n      </ThemeProvider>\n    </Auth0ComponentConfigContext.Provider>\n  );\n};\n",
      "type": "registry:file",
      "target": "providers/component-provider.tsx"
    },
    {
      "path": "src/providers/proxy-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport type { InternalProviderProps } from '@/types/auth-types';\nimport { CoreClientContext } from '@/hooks/use-core-client';\nimport { useCoreClientInitialization } from '@/hooks/use-core-client-initialization';\n\nexport const ProxyProvider = ({\n  i18n,\n  authDetails,\n  children,\n}: InternalProviderProps & { children: React.ReactNode }) => {\n  const coreClient = useCoreClientInitialization({\n    authDetails: {\n      ...authDetails,\n      contextInterface: undefined,\n    },\n    i18nOptions: i18n,\n  });\n\n  const coreClientValue = React.useMemo(\n    () => ({\n      coreClient,\n    }),\n    [coreClient],\n  );\n\n  return (\n    <CoreClientContext.Provider value={coreClientValue}>{children}</CoreClientContext.Provider>\n  );\n};\n\nexport default ProxyProvider;\n",
      "type": "registry:file",
      "target": "providers/proxy-provider.tsx"
    },
    {
      "path": "src/providers/spa-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport type { InternalProviderProps } from '@/types/auth-types';\nimport { CoreClientContext } from '@/hooks/use-core-client';\nimport { useCoreClientInitialization } from '@/hooks/use-core-client-initialization';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nexport const SpaProvider = ({\n  i18n,\n  authDetails,\n  children,\n}: InternalProviderProps & { children: React.ReactNode }) => {\n  const auth0ContextInterface = useAuth0();\n\n  const coreClient = useCoreClientInitialization({\n    authDetails: {\n      ...authDetails,\n      contextInterface: auth0ContextInterface,\n    },\n    i18nOptions: i18n,\n  });\n\n  const coreClientValue = React.useMemo(\n    () => ({\n      coreClient,\n    }),\n    [coreClient],\n  );\n\n  return (\n    <CoreClientContext.Provider value={coreClientValue}>{children}</CoreClientContext.Provider>\n  );\n};\n\nexport default SpaProvider;\n",
      "type": "registry:file",
      "target": "providers/spa-provider.tsx"
    },
    {
      "path": "src/providers/theme-provider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { mergeThemes } from '@/lib/theme-utils';\nimport type {\n  BrandingTheme,\n  CustomOverrides,\n  ThemeContextValue,\n  ThemeInput,\n} from '../types/theme-types';\n\n/**\n * Default branding theme if none is provided.\n */\nconst defaultBranding: BrandingTheme = {\n  mode: 'light',\n};\n\n/**\n * Default empty customer overrides.\n */\nconst defaultCustomOverrides: CustomOverrides = {};\n\n/**\n * ThemeContext\n *\n * Provides access to branding theme, customer overrides,\n * and a merged theme object for convenience.\n */\nexport const ThemeContext = React.createContext<ThemeContextValue>({\n  branding: defaultBranding,\n  customOverrides: defaultCustomOverrides,\n  mergedTheme: mergeThemes(defaultBranding, defaultCustomOverrides),\n});\n\n/**\n * ThemeProvider\n *\n * Provides theme configuration via React Context to all components in the tree.\n * It merges a branding theme (from UL) and optional customer overrides (CSS variables).\n *\n * @param theme - Optional branding and customerOverrides\n * @param children - The components that will have access to the theme\n *\n * @example\n * ```tsx\n * <ThemeProvider\n *   theme={{\n *     branding: { mode: 'dark', primaryColor: '#0070f3' },\n *     customerOverrides: { '--font-size': '14px' }\n *   }}\n * >\n *   <App />\n * </ThemeProvider>\n * ```\n */\nexport const ThemeProvider: React.FC<{\n  theme?: ThemeInput;\n  children: React.ReactNode;\n}> = ({ theme, children }) => {\n  const branding = React.useMemo(() => theme?.branding ?? defaultBranding, [theme?.branding]);\n  const customOverrides = React.useMemo(\n    () => theme?.customOverrides ?? defaultCustomOverrides,\n    [theme?.customOverrides],\n  );\n\n  const mergedTheme = React.useMemo(\n    () => mergeThemes(branding, customOverrides),\n    [branding, customOverrides],\n  );\n\n  return (\n    <ThemeContext.Provider value={{ branding, customOverrides, mergedTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n",
      "type": "registry:file",
      "target": "providers/theme-provider.tsx"
    },
    {
      "path": "src/types/auth-types.ts",
      "content": "import * as React from 'react';\nimport { AuthDetailsCore } from '@auth0-web-ui-components/core';\nimport { I18nOptions } from './i18n-types';\nimport { CustomOverrides, ThemeSettings } from './theme-types';\n\n/**\n * Auth0 authentication details with optional React-specific properties.\n */\nexport type AuthDetails = Omit<AuthDetailsCore, 'accessToken'>;\n\n/**\n * Props for the Auth0ComponentProvider component.\n */\nexport interface Auth0ComponentProviderProps {\n  i18n?: I18nOptions;\n  themeSettings?: ThemeSettings;\n  authDetails?: AuthDetails;\n  customOverrides?: CustomOverrides;\n  loader?: React.ReactNode;\n}\n\n/**\n * Props for the InternalProvider component.\n */\nexport interface InternalProviderProps {\n  i18n?: I18nOptions;\n  authDetails?: AuthDetails;\n}\n\n/**\n * Configuration for Auth0ComponentProvider excluding authentication details.\n */\nexport type Auth0ComponentConfig = Omit<Auth0ComponentProviderProps, 'authDetails' | 'i18n'>;\n",
      "type": "registry:file",
      "target": "types/auth-types.ts"
    },
    {
      "path": "src/types/index.ts",
      "content": "export * from './mfa-types';\n",
      "type": "registry:file",
      "target": "types/index.ts"
    },
    {
      "path": "src/types/mfa-types.ts",
      "content": "import type {\n  EnrollMfaResponse,\n  Authenticator,\n  MFAType,\n  EnrollOptions,\n  ConfirmEnrollmentOptions,\n  MFAMessages,\n} from '@auth0-web-ui-components/core';\n\nexport interface UserMFAMgmtProps {\n  customMessages?: Partial<MFAMessages>;\n  hideHeader?: boolean;\n  showActiveOnly?: boolean;\n  disableEnroll?: boolean;\n  disableDelete?: boolean;\n  readOnly?: boolean;\n  factorConfig?: {\n    [key in MFAType]?: {\n      visible?: boolean;\n      enabled?: boolean;\n    };\n  };\n  onEnroll?: () => void;\n  onDelete?: () => void;\n  onFetch?: () => void;\n  onErrorAction?: (error: Error, action: 'enroll' | 'delete' | 'confirm') => void;\n  onBeforeAction?: (\n    action: 'enroll' | 'delete' | 'confirm',\n    factorType: MFAType,\n  ) => boolean | Promise<boolean>;\n}\n\n/**\n * Result returned by the `useMFA` hook.\n * Provides methods to fetch, enroll, and delete MFA authenticators.\n */\nexport type UseMFAResult = {\n  /**\n   * Fetch the list of MFA authenticators.\n   * @param onlyActive - Whether to return only active authenticators.\n   * @returns A promise resolving to array of authenticators.\n   */\n  fetchFactors: (onlyActive?: boolean) => Promise<Authenticator[]>;\n\n  /**\n   * Enroll a new MFA factor (e.g., SMS, TOTP, Email).\n   * @param factorName - The type of MFA to enroll.\n   * @param options - Optional options like phone number or email.\n   * @returns A promise resolving to the enrollment response.\n   */\n  enrollMfa: (factorName: MFAType, options?: EnrollOptions) => Promise<EnrollMfaResponse>;\n\n  /**\n   * Delete an enrolled MFA authenticator by its ID.\n   * @param authenticatorId - The ID of the authenticator to delete.\n   * @returns A promise resolving to a success flag.\n   */\n  deleteMfa: (authenticatorId: string) => Promise<void>;\n\n  /**\n   * Confirm MFA enrollment with OOB code and user OTP code.\n   * @param factorName The MFA factor type.\n   * @param options The confirmation codes required to verify enrollment.\n   */\n  confirmEnrollment: (factorName: MFAType, options: ConfirmEnrollmentOptions) => Promise<unknown>;\n};\n",
      "type": "registry:file",
      "target": "types/mfa-types.ts"
    },
    {
      "path": "src/blocks/user-mfa-management.tsx",
      "content": "import * as React from 'react';\n\nimport { useComponentConfig, useMFA, useTranslator } from '@/hooks';\nimport type { UserMFAMgmtProps } from '@/types';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { Toaster } from '@/components/ui/sonner';\nimport { ENROLL, CONFIRM } from '@/lib/mfa-constants';\nimport { UserMFASetupForm } from '@/components/mfa/user-mfa-setup-form';\nimport { Spinner } from '@/components/ui/spinner';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { withCoreClient } from '@/hoc';\nimport { Authenticator, MFAType } from '@auth0-web-ui-components/core';\n\n/**\n * UserMFAMgmt Component\n *\n * A component responsible for managing Multi-Factor Authentication (MFA) factors for a user.\n * This component handles the mfa access token fetching ,fetching authenticators, enrolling, and deletion of MFA factors and manages the MFA access token.\n * It operates in both ProxyMode (RWA) and SPA modes for authentication.\n *\n * - **ProxyMode (RWA)**: In this mode, the component interacts with a proxy service to manage MFA\n * - **SPA (Single Page Application)**: In this mode, the component communicates directly with the API to manage MFA factors.\n * * @param {Object} props - The properties passed to the component.\n * @param {Object} [props.customMessages] - Custom messages to override default translations for this component instance.\n * @param {boolean} [props.hideHeader=false] - Whether to hide the header.\n * @param {boolean} [props.showActiveOnly=false] - Whether to show only active MFA factors.\n * @param {boolean} [props.disableEnroll=false] - Whether to disable the enrollment of new factors.\n * @param {boolean} [props.disableDelete=false] - Whether to disable the deletion of factors.\n * @param {boolean} [props.readOnly=false] - Whether the component is in read-only mode.\n * @param {Object} [props.factorConfig={}] - Configuration for MFA factors, controlling visibility and enabled state.\n * @param {Function} [props.onEnroll] - Callback fired when an MFA factor is successfully enrolled.\n * @param {Function} [props.onDelete] - Callback fired when an MFA factor is successfully deleted.\n * @param {Function} [props.onFetch] - Callback fired when MFA factors are fetched.\n * @param {Function} [props.onErrorAction] - Callback fired when an error occurs during an action (enroll/delete).\n * @param {Function} [props.onBeforeAction] - Callback fired before performing an action (enroll/delete).\n *\n * @returns {React.JSX.Element} The rendered component.\n */\nfunction UserMFAMgmtComponent({\n  customMessages = {},\n  hideHeader = false,\n  showActiveOnly = false,\n  disableEnroll = false,\n  disableDelete = false,\n  readOnly = false,\n  factorConfig = {},\n  onEnroll,\n  onDelete,\n  onFetch,\n  onErrorAction,\n  onBeforeAction,\n}: UserMFAMgmtProps): React.JSX.Element {\n  const { t } = useTranslator('mfa', customMessages);\n  const {\n    config: { loader },\n  } = useComponentConfig();\n  const { fetchFactors, enrollMfa, deleteMfa, confirmEnrollment } = useMFA();\n\n  const [factors, setFactors] = React.useState<Authenticator[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [isDeletingFactor, setIsDeletingFactor] = React.useState(false);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n  const [enrollFactor, setEnrollFactor] = React.useState<MFAType | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = React.useState(false);\n  const [factorToDelete, setFactorToDelete] = React.useState<{\n    id: string;\n    type: MFAType;\n  } | null>(null);\n\n  /**\n   * Loads the available MFA factors from the API and updates the state.\n   * This is called on initial load and when factors need to be refreshed.\n   */\n  const loadFactors = React.useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const factors = await fetchFactors(showActiveOnly);\n      setFactors(factors);\n      onFetch?.();\n    } catch (err) {\n      setError(t('errors.factors_loading_error'));\n    }\n\n    setLoading(false);\n  }, [fetchFactors, showActiveOnly, onFetch, onErrorAction]);\n\n  React.useEffect(() => {\n    loadFactors();\n  }, [loadFactors]);\n\n  /**\n   * Filters visible MFA factors based on the provided factor configuration.\n   * Each factor's visibility is determined by the configuration settings.\n   *\n   * @returns {Authenticator[]} Filtered MFA factors.\n   */\n  const visibleFactors = React.useMemo(() => {\n    return factors.filter((factor) => {\n      const config = factorConfig[factor.factorName as keyof typeof factorConfig];\n      return config?.visible !== false;\n    });\n  }, [factors, factorConfig]);\n\n  /**\n   * Handles the enrollment button click for a specific MFA factor.\n   * Opens the enrollment dialog for the chosen factor.\n   *\n   * @param {MFAType} factor - The MFA factor to be enrolled.\n   */\n  const handleEnrollClick = (factor: MFAType) => {\n    setEnrollFactor(factor);\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = React.useCallback(() => {\n    setDialogOpen(false);\n    setEnrollFactor(null);\n  }, []);\n\n  /**\n   * Handles the initial click on the delete button for an MFA factor.\n   * This function either:\n   * 1. Triggers the onBeforeAction callback and proceeds with deletion if approved\n   * 2. Opens a confirmation dialog if no onBeforeAction is provided\n   *\n   * The function prevents deletion if:\n   * - Component is in readonly mode\n   * - Delete action is disabled\n   * - onBeforeAction returns false\n   *\n   * @param {string} factorId - The unique identifier of the MFA factor to delete\n   * @param {MFAType} factorType - The type of MFA factor being deleted (e.g., 'sms', 'email', 'totp')\n   * @returns {Promise<void>}\n   */\n  const handleDeleteClick = React.useCallback(\n    async (factorId: string, factorType: MFAType) => {\n      if (readOnly || disableDelete) return;\n\n      if (onBeforeAction) {\n        // If onBeforeAction exists, proceed directly\n        const canProceed = await onBeforeAction('delete', factorType);\n        if (!canProceed) return;\n        await handleConfirmDelete(factorId);\n      } else {\n        setFactorToDelete({ id: factorId, type: factorType });\n        setIsDeleteDialogOpen(true);\n      }\n    },\n    [readOnly, disableDelete, onBeforeAction],\n  );\n\n  /**\n   * Handles the confirmation and execution of MFA factor deletion.\n   * This callback is triggered when a user confirms the deletion in the confirmation dialog\n   * or when deletion is approved through onBeforeAction.\n   *\n   * The function:\n   * 1. Deletes the MFA factor\n   * 2. Reloads the factors list\n   * 3. Shows success/error notifications\n   * 4. Handles cleanup of dialog and loading states\n   *\n   * @param {string} factorId - The unique identifier of the MFA factor to delete\n   * @throws {Error} When deletion fails or factors cannot be reloaded\n   */\n  const handleConfirmDelete = React.useCallback(\n    async (factorId: string) => {\n      setIsDeletingFactor(true);\n\n      const cleanUp = () => {\n        setIsDeletingFactor(false);\n        setIsDeleteDialogOpen(false);\n        setFactorToDelete(null);\n      };\n\n      try {\n        await deleteMfa(factorId);\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(t('errors.delete_factor'));\n        toast.error(t('errors.delete_factor'));\n        onErrorAction?.(error, 'delete');\n        cleanUp();\n        return;\n      }\n\n      toast.success(t('remove_factor'), {\n        duration: 2000,\n        onAutoClose: () => onDelete?.(),\n      });\n\n      try {\n        await loadFactors();\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(t('errors.factors_loading_error'));\n        onErrorAction?.(error, 'delete');\n      } finally {\n        cleanUp();\n      }\n    },\n    [deleteMfa, loadFactors, onDelete, onErrorAction, t],\n  );\n\n  /**\n   * Handles the successful enrollment of an MFA factor.\n   * Displays a success message and reloads the factors list.\n   */\n  const handleEnrollSuccess = React.useCallback(async () => {\n    setDialogOpen(false);\n    setEnrollFactor(null);\n    try {\n      toast.success(t('enroll_factor'), {\n        duration: 2000,\n        onAutoClose: () => {\n          onEnroll?.();\n        },\n      });\n      await loadFactors();\n    } catch {\n      toast.dismiss();\n      toast.error(t('errors.factors_loading_error'));\n    }\n  }, [loadFactors, onEnroll, t]);\n\n  /**\n   * Handles errors during the enrollment or confirmation process.\n   *\n   * @param {Error} error - The error object containing the failure message.\n   * @param {string} stage - The stage of the process ('enroll' or 'confirm').\n   */\n  const handleEnrollError = React.useCallback(\n    (error: Error, stage: typeof ENROLL | typeof CONFIRM) => {\n      toast.error(\n        `${stage === ENROLL ? t('enrollment') : t('confirmation')} ${t('errors.failed', { message: error.message })}`,\n      );\n      onErrorAction?.(error, stage);\n    },\n    [onErrorAction, t],\n  );\n\n  return (\n    <>\n      <Toaster position=\"top-right\" />\n      {loading ? (\n        loader || <Spinner />\n      ) : error ? (\n        <div className=\"flex items-center justify-center p-4\">\n          <Label className=\"text-center text-destructive\">{error}</Label>\n        </div>\n      ) : (\n        <Card>\n          {!hideHeader && (\n            <CardHeader>\n              <CardTitle>{t('title')}</CardTitle>\n              <CardDescription>{t('description')}</CardDescription>\n            </CardHeader>\n          )}\n\n          <CardContent className=\"grid gap-6 p-4 pt-0 md:p-6 md:pt-0\">\n            {showActiveOnly && visibleFactors.length === 0 ? (\n              <Label className=\"text-center text-muted-foreground\">{t('no_active_mfa')}</Label>\n            ) : (\n              visibleFactors.map((factor, idx) => {\n                const isEnabledFactor =\n                  factorConfig?.[factor.factorName as MFAType]?.enabled !== false;\n\n                return (\n                  <div\n                    key={`${factor.name}-${idx}`}\n                    className={`flex flex-col gap-6 ${!isEnabledFactor ? 'opacity-50 pointer-events-none' : ''}`}\n                    aria-disabled={!isEnabledFactor}\n                  >\n                    {idx > 0 && <Separator />}\n                    <div className=\"flex flex-col items-center justify-between space-y-6 md:flex-row md:space-x-2 md:space-y-0\">\n                      <Label className=\"flex flex-col items-start space-y-1\">\n                        <span className=\"leading-6 text-left\">\n                          {t(`${factor.factorName}.title`)}\n                          {factor.active && (\n                            <Badge variant=\"success\" size=\"sm\" className=\"ml-3\">\n                              {t('enrolled')}\n                            </Badge>\n                          )}\n                        </span>\n                        <p className=\"font-normal leading-snug text-muted-foreground text-left\">\n                          {t(`${factor.factorName}.description`)}\n                        </p>\n                      </Label>\n\n                      <div className=\"flex items-center justify-end space-x-24 md:min-w-72\">\n                        {factor.active\n                          ? !readOnly && (\n                              <Button\n                                type=\"submit\"\n                                size=\"sm\"\n                                onClick={() =>\n                                  handleDeleteClick(factor.id, factor.factorName as MFAType)\n                                }\n                                disabled={disableDelete || isDeletingFactor || !isEnabledFactor}\n                                aria-label={t('delete_factor', { factorName: factor.factorName })}\n                              >\n                                {t('delete')}\n                              </Button>\n                            )\n                          : !readOnly && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleEnrollClick(factor.factorName as MFAType)}\n                                disabled={disableEnroll || !isEnabledFactor}\n                              >\n                                {t('enroll')}\n                              </Button>\n                            )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </CardContent>\n        </Card>\n      )}\n      {enrollFactor && (\n        <UserMFASetupForm\n          open={dialogOpen}\n          onClose={handleCloseDialog}\n          factorType={enrollFactor}\n          enrollMfa={enrollMfa}\n          confirmEnrollment={confirmEnrollment}\n          onSuccess={handleEnrollSuccess}\n          onError={handleEnrollError}\n        />\n      )}\n      <Dialog\n        open={isDeleteDialogOpen}\n        onOpenChange={(open) => !isDeletingFactor && setIsDeleteDialogOpen(open)}\n      >\n        <DialogContent aria-describedby=\"delete-mfa-description\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">{t('delete_mfa_title')}</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <p id=\"delete-mfa-description\" className=\"text-center text-muted-foreground\">\n              {t('delete_mfa_content')}\n            </p>\n          </div>\n          <div className=\"flex justify-end gap-4 pt-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsDeleteDialogOpen(false)}\n              disabled={isDeletingFactor}\n            >\n              {t('cancel')}\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => factorToDelete && handleConfirmDelete(factorToDelete.id)}\n              disabled={isDeletingFactor}\n            >\n              {isDeletingFactor ? t('deleting') : t('delete')}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport const UserMFAMgmt = withCoreClient(UserMFAMgmtComponent);\n",
      "type": "registry:block",
      "target": "blocks/user-mfa-management.tsx"
    },
    {
      "path": "src/hoc/with-core-client.tsx",
      "content": "import * as React from 'react';\nimport { useComponentConfig, useCoreClient } from '../hooks';\nimport { Spinner } from '../components/ui/spinner';\n\n/**\n * Higher-Order Component that ensures the core client is initialized before rendering the wrapped component.\n *\n * This HOC is useful for components that depend on the core client (like MFA operations)\n * and need to wait for it to be properly initialized before they can function.\n *\n * @param WrappedComponent - The component that requires core client to be initialized\n * @returns A new component that handles core client initialization and loading states\n */\nexport function withCoreClient<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n): React.ComponentType<P> {\n  const WithCoreClientComponent = (props: P) => {\n    const {\n      config: { loader },\n    } = useComponentConfig();\n    const { coreClient } = useCoreClient();\n\n    if (!coreClient) {\n      return <>{loader || <Spinner />}</>;\n    }\n\n    return <WrappedComponent {...props} />;\n  };\n\n  // Set display name for better debugging\n  WithCoreClientComponent.displayName = WrappedComponent.displayName || WrappedComponent.name;\n\n  return WithCoreClientComponent;\n}\n",
      "type": "registry:file",
      "target": "hoc/with-core-client.tsx"
    }
  ]
}